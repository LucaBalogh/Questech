{"ast":null,"code":"var _jsxFileName = \"D:\\\\InternshipAccesa\\\\Traveltech\\\\src\\\\badgepage\\\\BadgePage.tsx\",\n    _s = $RefreshSig$();\n\nimport { CommandBar, DetailsList, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\nimport { DetailsListLayoutMode, Selection, SelectionMode } from \"@fluentui/react/lib/DetailsList\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../auth/AuthProvider\";\nimport { VIEW_QUESTPAGE, LOGOUT } from \"../utils/generalConstants\";\nimport { BadgeService } from \"../utils/service\";\nimport { getViewportAsPixels, getByRequestUrl, loggedUser, setSelectedBadge, setLoggedUser, getDefaultUser } from \"../utils/utilsMethods\";\nimport { commandBarStyles, detailsListColumnStyle, itemStyle, enabledMenuItemStyle, setGapBetweenHeaders, setGapBetweenHeadersAndDetailsList, transparentTheme, itemStyleForLastColumn, setGapBetweenHeadersAndUserInfo } from \"./BadgePage.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NAME_COLUMN = \"Name\";\nconst OBTAINED_AT_COLUMN = \"Obtained At\";\nconst OBTAINED_BY_COLUMN = \"User\";\n\nconst getColumnName = (nameB, obtained_at, user, name) => {\n  return name === nameB ? nameB : name === obtained_at ? obtained_at : name === user ? user : name;\n};\n\nconst getFieldName = columnName => {\n  return columnName === NAME_COLUMN ? \"name\" : columnName === OBTAINED_AT_COLUMN ? \"obtained_at\" : columnName === OBTAINED_BY_COLUMN ? \"user\" : \"\";\n};\n\nconst getColumn = (pageWidth, name) => {\n  return {\n    key: name,\n    name: getColumnName(NAME_COLUMN, OBTAINED_AT_COLUMN, OBTAINED_BY_COLUMN, name),\n    fieldName: getFieldName(name),\n    minWidth: getViewportAsPixels(pageWidth, 10),\n    maxWidth: getViewportAsPixels(pageWidth, 20),\n    isResizable: true,\n    isMultiline: true,\n    styles: detailsListColumnStyle\n  };\n};\n\nconst getColumns = (pageWidth, names) => {\n  return names.map(name => getColumn(pageWidth, name));\n};\n\nexport const getListItemFromMainPage = badge => {\n  return {\n    id: badge.id,\n    name: badge.name,\n    obtained_at: badge.obtained_at,\n    user: `${badge.user.firstName}${\" \"}${badge.user.lastName}`\n  };\n};\n\nconst renderItemColumn = (item, index, column) => {\n  const fieldContent = item[column.fieldName];\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: column.fieldName !== \"created\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: itemStyle,\n      children: fieldContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: itemStyleForLastColumn,\n      children: fieldContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\nconst getBadgeMain = allBadges => {\n  return allBadges.map(item => getListItemFromMainPage(item));\n};\n\nconst getMenuItem = name => {\n  return {\n    key: name,\n    text: name,\n    iconProps: {\n      iconName: name\n    }\n  };\n};\n\nconst getMenuItems = names => {\n  return names.map(name => getMenuItem(name));\n};\n\nconst BadgePage = props => {\n  _s();\n\n  const {\n    isAuthenticated\n  } = useAuth();\n  const navigate = useNavigate();\n  const [items, setItems] = useState([]);\n  const [badge, setBadgeMain] = useState([]);\n  const [selectedItems, setSelectedItems] = useState(undefined);\n  const [selection] = useState(() => new Selection({\n    onSelectionChanged: () => {\n      const selectedItems = selection.getSelection();\n      const selected = selectedItems[0];\n      setSelectedBadge(selected);\n      setSelectedItems(selectedItems);\n    }\n  }));\n  const columns = getColumns(props.pageWidth, [NAME_COLUMN, OBTAINED_AT_COLUMN, OBTAINED_BY_COLUMN]);\n  const menuItems = getMenuItems([VIEW_QUESTPAGE, LOGOUT]);\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate(\"/login\");\n    }\n  }, [isAuthenticated]);\n  useEffect(() => {\n    getAllBadges();\n  }, []);\n\n  const getAllBadges = async () => {\n    const allBadges = await getByRequestUrl(`${BadgeService.GET_ALL_BADGES_BY_USER}${loggedUser.id}`);\n    setItems(getBadgeMain(allBadges));\n    setBadgeMain(allBadges);\n  };\n\n  const getSelectedItem = () => {\n    return selectedItems[0];\n  };\n\n  const getTitle = () => {\n    return `${\"BadgePage page for, \"}${loggedUser.firstName}${\" \"}${loggedUser.lastName}${\"!\"}`;\n  };\n\n  const onViewClicked = () => {\n    if (isAuthenticated) {\n      navigate(\"/quests\");\n    }\n  };\n\n  const onLogOutClicked = () => {\n    setLoggedUser(getDefaultUser());\n    navigate(\"/\");\n  };\n\n  const updateMenuItems = () => {\n    return menuItems.map(item => {\n      switch (item.key) {\n        case VIEW_QUESTPAGE:\n          item.onClick = () => onViewClicked();\n\n          item.style = enabledMenuItemStyle;\n          break;\n\n        case LOGOUT:\n          item.onClick = () => onLogOutClicked();\n\n          item.style = enabledMenuItemStyle;\n          break;\n\n        default:\n          return item;\n      }\n\n      return item;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      className: \"hero is-fullheight has-background-dark\",\n      tokens: setGapBetweenHeadersAndDetailsList,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        horizontal: true,\n        tokens: setGapBetweenHeadersAndUserInfo,\n        children: /*#__PURE__*/_jsxDEV(StackItem, {\n          tokens: setGapBetweenHeaders,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title has-text-white is-size-3 marginFH2\",\n            children: [\" \", getTitle(), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StackItem, {\n        children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n          theme: transparentTheme,\n          children: [/*#__PURE__*/_jsxDEV(CommandBar, {\n            id: \"view\",\n            items: updateMenuItems(),\n            styles: commandBarStyles\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DetailsList, {\n            className: \"hero is-fullheight has-background-dark\",\n            items: items,\n            setKey: \"set\",\n            columns: columns,\n            selectionMode: SelectionMode.single,\n            layoutMode: DetailsListLayoutMode.justified,\n            selection: selection,\n            selectionPreservedOnEmptyClick: true,\n            onRenderItemColumn: renderItemColumn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 7\n  }, this);\n};\n\n_s(BadgePage, \"nDrPloa4pYulJuqjJWyjiwPBpIY=\", false, function () {\n  return [useAuth, useNavigate];\n});\n\n_c = BadgePage;\nexport default BadgePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BadgePage\");","map":{"version":3,"sources":["D:/InternshipAccesa/Traveltech/src/badgepage/BadgePage.tsx"],"names":["CommandBar","DetailsList","Stack","StackItem","ThemeProvider","DetailsListLayoutMode","Selection","SelectionMode","React","useEffect","useState","useNavigate","useAuth","VIEW_QUESTPAGE","LOGOUT","BadgeService","getViewportAsPixels","getByRequestUrl","loggedUser","setSelectedBadge","setLoggedUser","getDefaultUser","commandBarStyles","detailsListColumnStyle","itemStyle","enabledMenuItemStyle","setGapBetweenHeaders","setGapBetweenHeadersAndDetailsList","transparentTheme","itemStyleForLastColumn","setGapBetweenHeadersAndUserInfo","NAME_COLUMN","OBTAINED_AT_COLUMN","OBTAINED_BY_COLUMN","getColumnName","nameB","obtained_at","user","name","getFieldName","columnName","getColumn","pageWidth","key","fieldName","minWidth","maxWidth","isResizable","isMultiline","styles","getColumns","names","map","getListItemFromMainPage","badge","id","firstName","lastName","renderItemColumn","item","index","column","fieldContent","getBadgeMain","allBadges","getMenuItem","text","iconProps","iconName","getMenuItems","BadgePage","props","isAuthenticated","navigate","items","setItems","setBadgeMain","selectedItems","setSelectedItems","undefined","selection","onSelectionChanged","getSelection","selected","columns","menuItems","getAllBadges","GET_ALL_BADGES_BY_USER","getSelectedItem","getTitle","onViewClicked","onLogOutClicked","updateMenuItems","onClick","style","single","justified"],"mappings":"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","sourcesContent":["import { CommandBar, DetailsList, IColumn, IContextualMenuItem, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\r\nimport { DetailsListLayoutMode, IObjectWithKey, Selection, SelectionMode } from \"@fluentui/react/lib/DetailsList\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../auth/AuthProvider\";\r\nimport { IMainPageProps } from \"../model/IMainPageProps\";\r\nimport { BadgeDetailsListItem } from \"../model/IBadgeDetailsListItem\";\r\nimport {VIEW_QUESTPAGE, LOGOUT} from \"../utils/generalConstants\";\r\nimport {BadgeService} from \"../utils/service\";\r\nimport {\r\n  getViewportAsPixels,\r\n  getByRequestUrl,\r\n  loggedUser, setSelectedBadge, setLoggedUser, getDefaultUser\r\n} from \"../utils/utilsMethods\";\r\nimport {\r\n  commandBarStyles,\r\n  defaultMenuItemStyle,\r\n  detailsListColumnStyle,\r\n  itemStyle,\r\n  enabledMenuItemStyle,\r\n  setGapBetweenHeaders,\r\n  setGapBetweenHeadersAndDetailsList,\r\n  transparentTheme,\r\n  itemStyleForLastColumn,\r\n  setGapBetweenHeadersAndUserInfo, setStyleForUserName\r\n} from \"./BadgePage.styles\";\r\nimport {Badge} from \"../model/IBadge\";\r\n\r\nconst NAME_COLUMN: string = \"Name\";\r\nconst OBTAINED_AT_COLUMN: string = \"Obtained At\";\r\nconst OBTAINED_BY_COLUMN: string = \"User\";\r\n\r\nconst getColumnName = (nameB: string, obtained_at: string, user: string, name: string): string => {\r\n  return name === nameB\r\n    ? nameB\r\n    : name === obtained_at\r\n    ? obtained_at\r\n    : name === user\r\n    ? user: name;\r\n};\r\n\r\nconst getFieldName = (columnName: string): string => {\r\n  return columnName === NAME_COLUMN\r\n    ? \"name\"\r\n    : columnName === OBTAINED_AT_COLUMN\r\n    ? \"obtained_at\"\r\n    : columnName === OBTAINED_BY_COLUMN\r\n    ? \"user\"\r\n    : \"\";\r\n};\r\n\r\nconst getColumn = (pageWidth: number, name: string): IColumn => {\r\n  return {\r\n    key: name,\r\n    name: getColumnName(NAME_COLUMN,OBTAINED_AT_COLUMN,OBTAINED_BY_COLUMN,name),\r\n    fieldName: getFieldName(name),\r\n    minWidth: getViewportAsPixels(pageWidth, 10),\r\n    maxWidth: getViewportAsPixels(pageWidth, 20),\r\n    isResizable: true,\r\n    isMultiline: true,\r\n    styles: detailsListColumnStyle,\r\n  };\r\n};\r\n\r\nconst getColumns = (pageWidth: number, names: string[]): IColumn[] => {\r\n  return names.map((name: string) => getColumn(pageWidth, name));\r\n};\r\n\r\nexport const getListItemFromMainPage = (badge : Badge): BadgeDetailsListItem => {\r\n  return {\r\n    id: badge.id,\r\n    name: badge.name,\r\n    obtained_at: badge.obtained_at,\r\n    user: `${badge.user.firstName}${\" \"}${badge.user.lastName}`,\r\n  };\r\n};\r\n\r\nconst renderItemColumn = (item: any, index?: number, column?: IColumn): React.ReactFragment => {\r\n  const fieldContent = item[column!.fieldName as keyof BadgeDetailsListItem] as string;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {column!.fieldName !== \"created\"\r\n        ? <span className={itemStyle}>{fieldContent}</span>\r\n        : <span className={itemStyleForLastColumn}>{fieldContent}</span>\r\n      }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst getBadgeMain = (allBadges: Badge[]): BadgeDetailsListItem[] => {\r\n  return allBadges.map((item) => getListItemFromMainPage(item));\r\n};\r\n\r\nconst getMenuItem = (name: string): IContextualMenuItem => {\r\n  return {\r\n    key: name,\r\n    text: name,\r\n    iconProps: { iconName: name },\r\n  };\r\n};\r\n\r\nconst getMenuItems = (names: string[]): IContextualMenuItem[] => {\r\n  return names.map((name: string) => getMenuItem(name));\r\n};\r\n\r\nconst BadgePage = (props: IMainPageProps): JSX.Element => {\r\n  const { isAuthenticated } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [items, setItems] = useState<BadgeDetailsListItem[]>([]);\r\n  const [badge, setBadgeMain] = useState<Badge[]>([]);\r\n  const [selectedItems, setSelectedItems] = useState<IObjectWithKey[] | undefined>(undefined);\r\n  const [selection] = useState<Selection>(\r\n    () =>\r\n      new Selection({\r\n        onSelectionChanged: () => {\r\n          const selectedItems: IObjectWithKey[] = selection.getSelection();\r\n          const selected: BadgeDetailsListItem = selectedItems[0] as BadgeDetailsListItem;\r\n          setSelectedBadge(selected);\r\n          setSelectedItems(selectedItems);\r\n        }\r\n      })\r\n  );\r\n\r\n  const columns: IColumn[] = getColumns(props.pageWidth, [NAME_COLUMN, OBTAINED_AT_COLUMN, OBTAINED_BY_COLUMN]);\r\n  const menuItems: IContextualMenuItem[] = getMenuItems([VIEW_QUESTPAGE, LOGOUT]);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    getAllBadges();\r\n  }, []);\r\n\r\n\r\n    const getAllBadges= async () => {\r\n      const allBadges: Badge[] = await getByRequestUrl(`${BadgeService.GET_ALL_BADGES_BY_USER}${loggedUser.id}`);\r\n      setItems(getBadgeMain(allBadges));\r\n      setBadgeMain(allBadges);\r\n    };\r\n\r\n  const getSelectedItem = (): IObjectWithKey => {\r\n    return selectedItems![0];\r\n  };\r\n\r\n  const getTitle = (): string => {\r\n    return `${\"BadgePage page for, \"}${loggedUser.firstName}${ \" \"}${loggedUser.lastName}${\"!\"}`;\r\n  };\r\n\r\n\r\n  const onViewClicked = (): void => {\r\n    if (isAuthenticated) {\r\n      navigate(\"/quests\");\r\n    }\r\n  };\r\n\r\n  const onLogOutClicked = (): void => {\r\n      setLoggedUser(getDefaultUser());\r\n      navigate(\"/\");\r\n  };\r\n\r\n\r\n  const updateMenuItems = (): IContextualMenuItem[] => {\r\n    return menuItems.map((item: IContextualMenuItem) => {\r\n      switch (item.key) {\r\n        case VIEW_QUESTPAGE:\r\n          item.onClick = () => onViewClicked();\r\n          item.style = enabledMenuItemStyle\r\n          break;\r\n        case LOGOUT:\r\n          item.onClick = () => onLogOutClicked();\r\n          item.style = enabledMenuItemStyle\r\n          break;\r\n        default:\r\n          return item;\r\n      }\r\n      return item;\r\n    });\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <Stack className=\"hero is-fullheight has-background-dark\" tokens={setGapBetweenHeadersAndDetailsList}>\r\n          <Stack horizontal tokens={setGapBetweenHeadersAndUserInfo}>\r\n            <StackItem tokens={setGapBetweenHeaders}>\r\n              <p className=\"title has-text-white is-size-3 marginFH2\"> {getTitle()} </p>\r\n            </StackItem>\r\n          </Stack>\r\n          <StackItem>\r\n            <ThemeProvider theme={transparentTheme}>\r\n              <CommandBar id = \"view\" items={updateMenuItems()} styles={commandBarStyles} />\r\n              <DetailsList className=\"hero is-fullheight has-background-dark\"\r\n                           items={items}\r\n                           setKey=\"set\"\r\n                           columns={columns}\r\n                           selectionMode={SelectionMode.single}\r\n                           layoutMode={DetailsListLayoutMode.justified}\r\n                           selection={selection}\r\n                           selectionPreservedOnEmptyClick={true}\r\n                           onRenderItemColumn={renderItemColumn}>\r\n              </DetailsList>\r\n            </ThemeProvider>\r\n          </StackItem>\r\n        </Stack>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default BadgePage;\r\n"]},"metadata":{},"sourceType":"module"}