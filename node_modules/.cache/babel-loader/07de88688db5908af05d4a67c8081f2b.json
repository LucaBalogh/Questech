{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\nvar StyledSuggestionsItem = styled(SuggestionsItem, suggestionsItemStyles, undefined, {\n  scope: 'SuggestionItem'\n});\n/**\n * {@docCategory Pickers}\n */\n\nvar Suggestions =\n/** @class */\nfunction (_super) {\n  __extends(Suggestions, _super);\n\n  function Suggestions(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this._forceResolveButton = React.createRef();\n    _this._searchForMoreButton = React.createRef();\n    _this._selectedElement = React.createRef();\n    _this._scrollContainer = React.createRef();\n    /**\n     * Returns true if the event was handled, false otherwise\n     */\n\n    _this.tryHandleKeyDown = function (keyCode, currentSuggestionIndex) {\n      var isEventHandled = false;\n      var newSelectedActionType = null;\n      var currentSelectedAction = _this.state.selectedActionType;\n      var suggestionLength = _this.props.suggestions.length;\n\n      if (keyCode === KeyCodes.down) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case SuggestionActionType.searchMore:\n            if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n\n            break;\n\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n        }\n      } else if (keyCode === KeyCodes.up) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            }\n\n            break;\n\n          case SuggestionActionType.searchMore:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n\n            break;\n        }\n      }\n\n      if (newSelectedActionType !== null) {\n        _this.setState({\n          selectedActionType: newSelectedActionType\n        });\n\n        isEventHandled = true;\n      }\n\n      return isEventHandled;\n    };\n\n    _this._getAlertText = function () {\n      var _a = _this.props,\n          isLoading = _a.isLoading,\n          isSearching = _a.isSearching,\n          suggestions = _a.suggestions,\n          suggestionsAvailableAlertText = _a.suggestionsAvailableAlertText,\n          noResultsFoundText = _a.noResultsFoundText;\n\n      if (!isLoading && !isSearching) {\n        if (suggestions.length > 0) {\n          return suggestionsAvailableAlertText || '';\n        }\n\n        if (noResultsFoundText) {\n          return noResultsFoundText;\n        }\n      }\n\n      return '';\n    };\n\n    _this._getMoreResults = function () {\n      if (_this.props.onGetMoreResults) {\n        _this.props.onGetMoreResults(); // Reset selected action type as it will be of type SuggestionActionType.none after more results are gotten\n\n\n        _this.setState({\n          selectedActionType: SuggestionActionType.none\n        });\n      }\n    };\n\n    _this._forceResolve = function () {\n      if (_this.props.createGenericItem) {\n        _this.props.createGenericItem();\n      }\n    };\n\n    _this._shouldShowForceResolve = function () {\n      return _this.props.showForceResolve ? _this.props.showForceResolve() : false;\n    };\n\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n\n    _this._refocusOnSuggestions = function (keyCode) {\n      if (typeof _this.props.refocusSuggestions === 'function') {\n        _this.props.refocusSuggestions(keyCode);\n      }\n    };\n\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      selectedActionType: SuggestionActionType.none\n    };\n    return _this;\n  }\n\n  Suggestions.prototype.componentDidMount = function () {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  };\n\n  Suggestions.prototype.componentDidUpdate = function () {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  };\n\n  Suggestions.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.props,\n        forceResolveText = _c.forceResolveText,\n        mostRecentlyUsedHeaderText = _c.mostRecentlyUsedHeaderText,\n        searchForMoreIcon = _c.searchForMoreIcon,\n        searchForMoreText = _c.searchForMoreText,\n        className = _c.className,\n        moreSuggestionsAvailable = _c.moreSuggestionsAvailable,\n        noResultsFoundText = _c.noResultsFoundText,\n        suggestions = _c.suggestions,\n        isLoading = _c.isLoading,\n        isSearching = _c.isSearching,\n        loadingText = _c.loadingText,\n        onRenderNoResultFound = _c.onRenderNoResultFound,\n        searchingText = _c.searchingText,\n        isMostRecentlyUsedVisible = _c.isMostRecentlyUsedVisible,\n        resultsMaximumNumber = _c.resultsMaximumNumber,\n        resultsFooterFull = _c.resultsFooterFull,\n        resultsFooter = _c.resultsFooter,\n        _d = _c.isResultsFooterVisible,\n        isResultsFooterVisible = _d === void 0 ? true : _d,\n        suggestionsHeaderText = _c.suggestionsHeaderText,\n        suggestionsClassName = _c.suggestionsClassName,\n        theme = _c.theme,\n        styles = _c.styles,\n        suggestionsListId = _c.suggestionsListId; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    this._classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggestionsClassName: suggestionsClassName,\n      forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n      searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore\n    }) : {\n      root: css('ms-Suggestions', className, legacyStyles.root),\n      title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n      searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, (_a = {}, _a['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.searchMore, _a)),\n      forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, (_b = {}, _b['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.forceResolve, _b)),\n      suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n      suggestionsContainer: css('ms-Suggestions-container', legacyStyles.suggestionsContainer, suggestionsClassName),\n      noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone)\n    };\n    var spinnerStyles = this._classNames.subComponentStyles ? this._classNames.subComponentStyles.spinner : undefined; // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n\n    var spinnerClassNameOrStyles = styles ? {\n      styles: spinnerStyles\n    } : {\n      className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner)\n    };\n\n    var noResults = function () {\n      return (// This ID can be used by the parent to set aria-activedescendant to this\n        React.createElement(\"div\", {\n          id: \"sug-noResultsFound\",\n          role: \"option\"\n        }, onRenderNoResultFound ? onRenderNoResultFound(undefined, noResults) : React.createElement(\"div\", {\n          className: _this._classNames.noSuggestions\n        }, noResultsFoundText))\n      );\n    }; // MostRecently Used text should supercede the header text if it's there and available.\n\n\n    var headerText = suggestionsHeaderText;\n\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    var footerTitle = undefined;\n\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= resultsMaximumNumber ? resultsFooterFull : resultsFooter;\n    }\n\n    var hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    var divProps = hasNoSuggestions || isLoading ? {\n      role: 'listbox',\n      id: suggestionsListId\n    } : {};\n    var forceResolveId = this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    var searchForMoreId = this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, divProps), React.createElement(Announced, {\n      message: this._getAlertText(),\n      \"aria-live\": \"polite\"\n    }), headerText ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, headerText) : null, forceResolveText && this._shouldShowForceResolve() && React.createElement(CommandButton, {\n      componentRef: this._forceResolveButton,\n      className: this._classNames.forceResolveButton,\n      id: forceResolveId,\n      onClick: this._forceResolve,\n      \"data-automationid\": 'sug-forceResolve'\n    }, forceResolveText), isLoading && React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      label: loadingText\n    })), hasNoSuggestions ? noResults() : this._renderSuggestions(), searchForMoreText && moreSuggestionsAvailable && React.createElement(CommandButton, {\n      componentRef: this._searchForMoreButton,\n      className: this._classNames.searchForMoreButton,\n      iconProps: searchForMoreIcon || {\n        iconName: 'Search'\n      },\n      id: searchForMoreId,\n      onClick: this._getMoreResults,\n      \"data-automationid\": 'sug-searchForMore'\n    }, searchForMoreText), isSearching ? React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      label: searchingText\n    })) : null, footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, footerTitle(this.props)) : null);\n  };\n\n  Suggestions.prototype.hasSuggestedAction = function () {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  };\n\n  Suggestions.prototype.hasSuggestedActionSelected = function () {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  };\n\n  Suggestions.prototype.executeSelectedAction = function () {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n\n        break;\n\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n\n        break;\n    }\n  };\n\n  Suggestions.prototype.focusAboveSuggestions = function () {\n    if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    }\n  };\n\n  Suggestions.prototype.focusBelowSuggestions = function () {\n    if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    } else if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    }\n  };\n\n  Suggestions.prototype.focusSearchForMoreButton = function () {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  };\n\n  Suggestions.prototype.scrollSelected = function () {\n    if (this._selectedElement.current && this._scrollContainer.current && this._scrollContainer.current.scrollTo !== undefined) {\n      var _a = this._selectedElement.current,\n          offsetHeight = _a.offsetHeight,\n          offsetTop = _a.offsetTop;\n      var _b = this._scrollContainer.current,\n          parentOffsetHeight = _b.offsetHeight,\n          scrollTop = _b.scrollTop;\n      var isAbove = offsetTop < scrollTop;\n      var isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n      if (isAbove) {\n        this._scrollContainer.current.scrollTo(0, offsetTop);\n      } else if (isBelow) {\n        this._scrollContainer.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n      }\n    }\n  };\n\n  Suggestions.prototype._renderSuggestions = function () {\n    var _this = this;\n\n    var _a = this.props,\n        isMostRecentlyUsedVisible = _a.isMostRecentlyUsedVisible,\n        mostRecentlyUsedHeaderText = _a.mostRecentlyUsedHeaderText,\n        onRenderSuggestion = _a.onRenderSuggestion,\n        removeSuggestionAriaLabel = _a.removeSuggestionAriaLabel,\n        suggestionsItemClassName = _a.suggestionsItemClassName,\n        resultsMaximumNumber = _a.resultsMaximumNumber,\n        showRemoveButtons = _a.showRemoveButtons,\n        suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel,\n        suggestionsHeaderText = _a.suggestionsHeaderText,\n        suggestionsListId = _a.suggestionsListId,\n        removeButtonIconProps = _a.removeButtonIconProps;\n    var suggestions = this.props.suggestions;\n    var StyledTypedSuggestionsItem = StyledSuggestionsItem;\n    var selectedIndex = -1;\n    suggestions.some(function (element, index) {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions = selectedIndex >= resultsMaximumNumber ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1) : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    } // MostRecently Used text should supercede the header text if it's there and available.\n\n\n    var headerText = suggestionsHeaderText;\n\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.suggestionsContainer,\n      id: suggestionsListId,\n      ref: this._scrollContainer,\n      role: \"listbox\",\n      \"aria-label\": suggestionsContainerAriaLabel || headerText\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        role: \"presentation\"\n      }, React.createElement(StyledTypedSuggestionsItem, {\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        removeButtonAriaLabel: removeSuggestionAriaLabel,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        id: 'sug-' + index,\n        removeButtonIconProps: removeButtonIconProps\n      }));\n    }));\n  };\n\n  return Suggestions;\n}(React.Component);\n\nexport { Suggestions };","map":{"version":3,"sources":["components/pickers/Suggestions/Suggestions.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nimport type { IStyleFunctionOrObject } from '../../../Utilities';\nimport type { IProcessedStyleSet } from '../../../Styling';\nimport type { IButton } from '../../../Button';\nimport type { ISpinnerStyleProps, ISpinnerStyles } from '../../../Spinner';\nimport type { ISuggestionsProps, ISuggestionsStyleProps, ISuggestionsStyles } from './Suggestions.types';\nimport type { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsStyleProps, ISuggestionsStyles>();\n\nexport interface ISuggestionsState {\n  selectedActionType: SuggestionActionType;\n}\n\nconst StyledSuggestionsItem = styled<ISuggestionItemProps<any>, ISuggestionsItemStyleProps, ISuggestionsItemStyles>(\n  SuggestionsItem,\n  suggestionsItemStyles,\n  undefined,\n  {\n    scope: 'SuggestionItem',\n  },\n);\n\n/**\n * {@docCategory Pickers}\n */\nexport class Suggestions<T> extends React.Component<ISuggestionsProps<T>, ISuggestionsState> {\n  protected _forceResolveButton = React.createRef<IButton>();\n  protected _searchForMoreButton = React.createRef<IButton>();\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  protected _scrollContainer = React.createRef<HTMLDivElement>();\n  private activeSelectedElement: HTMLDivElement | null;\n  private _classNames: Partial<IProcessedStyleSet<ISuggestionsStyles>>;\n\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      selectedActionType: SuggestionActionType.none,\n    };\n  }\n\n  public componentDidMount(): void {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  }\n\n  public componentDidUpdate(): void {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      forceResolveText,\n      mostRecentlyUsedHeaderText,\n      searchForMoreIcon,\n      searchForMoreText,\n      className,\n      moreSuggestionsAvailable,\n      noResultsFoundText,\n      suggestions,\n      isLoading,\n      isSearching,\n      loadingText,\n      onRenderNoResultFound,\n      searchingText,\n      isMostRecentlyUsedVisible,\n      resultsMaximumNumber,\n      resultsFooterFull,\n      resultsFooter,\n      isResultsFooterVisible = true,\n      suggestionsHeaderText,\n      suggestionsClassName,\n      theme,\n      styles,\n      suggestionsListId,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggestionsClassName,\n          forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n          searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore,\n        })\n      : {\n          root: css('ms-Suggestions', className, legacyStyles.root),\n          title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n          searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.searchMore,\n          }),\n          forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.forceResolve,\n          }),\n          suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n          suggestionsContainer: css(\n            'ms-Suggestions-container',\n            legacyStyles.suggestionsContainer,\n            suggestionsClassName,\n          ),\n          noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone),\n        };\n\n    const spinnerStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.spinner as IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>)\n      : undefined;\n\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    const spinnerClassNameOrStyles = styles\n      ? { styles: spinnerStyles }\n      : {\n          className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner),\n        };\n\n    const noResults = () => (\n      // This ID can be used by the parent to set aria-activedescendant to this\n      <div id=\"sug-noResultsFound\" role=\"option\">\n        {onRenderNoResultFound ? (\n          onRenderNoResultFound(undefined, noResults)\n        ) : (\n          <div className={this._classNames.noSuggestions}>{noResultsFoundText}</div>\n        )}\n      </div>\n    );\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    let footerTitle: ((props: ISuggestionsProps<T>) => JSX.Element) | undefined = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= (resultsMaximumNumber as number) ? resultsFooterFull : resultsFooter;\n    }\n\n    const hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    const divProps: React.HtmlHTMLAttributes<HTMLDivElement> =\n      hasNoSuggestions || isLoading ? { role: 'listbox', id: suggestionsListId } : {};\n\n    const forceResolveId =\n      this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    const searchForMoreId =\n      this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n\n    return (\n      <div className={this._classNames.root} {...divProps}>\n        <Announced message={this._getAlertText()} aria-live=\"polite\" />\n\n        {headerText ? <div className={this._classNames.title}>{headerText}</div> : null}\n        {forceResolveText && this._shouldShowForceResolve() && (\n          <CommandButton\n            componentRef={this._forceResolveButton}\n            className={this._classNames.forceResolveButton}\n            id={forceResolveId}\n            onClick={this._forceResolve}\n            data-automationid={'sug-forceResolve'}\n          >\n            {forceResolveText}\n          </CommandButton>\n        )}\n        {isLoading && <Spinner {...spinnerClassNameOrStyles} label={loadingText} />}\n        {hasNoSuggestions ? noResults() : this._renderSuggestions()}\n        {searchForMoreText && moreSuggestionsAvailable && (\n          <CommandButton\n            componentRef={this._searchForMoreButton}\n            className={this._classNames.searchForMoreButton}\n            iconProps={searchForMoreIcon || { iconName: 'Search' }}\n            id={searchForMoreId}\n            onClick={this._getMoreResults}\n            data-automationid={'sug-searchForMore'}\n          >\n            {searchForMoreText}\n          </CommandButton>\n        )}\n        {isSearching ? <Spinner {...spinnerClassNameOrStyles} label={searchingText} /> : null}\n        {footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? (\n          <div className={this._classNames.title}>{footerTitle(this.props)}</div>\n        ) : null}\n      </div>\n    );\n  }\n\n  /**\n   * Returns true if the event was handled, false otherwise\n   */\n  public tryHandleKeyDown = (keyCode: number, currentSuggestionIndex: number): boolean => {\n    let isEventHandled = false;\n    let newSelectedActionType = null;\n    const currentSelectedAction = this.state.selectedActionType;\n    const suggestionLength = this.props.suggestions.length;\n    if (keyCode === KeyCodes.down) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n      }\n    } else if (keyCode === KeyCodes.up) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n      }\n    }\n\n    if (newSelectedActionType !== null) {\n      this.setState({ selectedActionType: newSelectedActionType });\n      isEventHandled = true;\n    }\n\n    return isEventHandled;\n  };\n\n  public hasSuggestedAction(): boolean {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  }\n\n  public hasSuggestedActionSelected(): boolean {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  }\n\n  public executeSelectedAction(): void {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  }\n\n  public focusAboveSuggestions(): void {\n    if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    }\n  }\n\n  public focusBelowSuggestions(): void {\n    if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    } else if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    }\n  }\n\n  public focusSearchForMoreButton(): void {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }\n\n  public scrollSelected(): void {\n    if (\n      this._selectedElement.current &&\n      this._scrollContainer.current &&\n      this._scrollContainer.current.scrollTo !== undefined\n    ) {\n      const { offsetHeight, offsetTop } = this._selectedElement.current;\n      const { offsetHeight: parentOffsetHeight, scrollTop } = this._scrollContainer.current;\n\n      const isAbove = offsetTop < scrollTop;\n      const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n      if (isAbove) {\n        this._scrollContainer.current.scrollTo(0, offsetTop);\n      } else if (isBelow) {\n        this._scrollContainer.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n      }\n    }\n  }\n\n  private _getAlertText = () => {\n    const { isLoading, isSearching, suggestions, suggestionsAvailableAlertText, noResultsFoundText } = this.props;\n    if (!isLoading && !isSearching) {\n      if (suggestions.length > 0) {\n        return suggestionsAvailableAlertText || '';\n      }\n      if (noResultsFoundText) {\n        return noResultsFoundText;\n      }\n    }\n    return '';\n  };\n\n  private _renderSuggestions(): JSX.Element | null {\n    const {\n      isMostRecentlyUsedVisible,\n      mostRecentlyUsedHeaderText,\n      onRenderSuggestion,\n      removeSuggestionAriaLabel,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n      suggestionsHeaderText,\n      suggestionsListId,\n      removeButtonIconProps,\n    } = this.props;\n\n    let { suggestions } = this.props;\n\n    const StyledTypedSuggestionsItem: React.FunctionComponent<ISuggestionItemProps<T>> = StyledSuggestionsItem;\n\n    let selectedIndex = -1;\n    suggestions.some((element, index) => {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions =\n        selectedIndex >= resultsMaximumNumber\n          ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1)\n          : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    return (\n      <div\n        className={this._classNames.suggestionsContainer}\n        id={suggestionsListId}\n        ref={this._scrollContainer}\n        role=\"listbox\"\n        aria-label={suggestionsContainerAriaLabel || headerText}\n      >\n        {suggestions.map((suggestion, index) => (\n          <div\n            ref={suggestion.selected ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            role=\"presentation\"\n          >\n            <StyledTypedSuggestionsItem\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              removeButtonAriaLabel={removeSuggestionAriaLabel}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              id={'sug-' + index}\n              removeButtonIconProps={removeButtonIconProps}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private _getMoreResults = (): void => {\n    if (this.props.onGetMoreResults) {\n      this.props.onGetMoreResults();\n\n      // Reset selected action type as it will be of type SuggestionActionType.none after more results are gotten\n      this.setState({ selectedActionType: SuggestionActionType.none });\n    }\n  };\n\n  private _forceResolve = (): void => {\n    if (this.props.createGenericItem) {\n      this.props.createGenericItem();\n    }\n  };\n\n  private _shouldShowForceResolve = (): boolean => {\n    return this.props.showForceResolve ? this.props.showForceResolve() : false;\n  };\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _refocusOnSuggestions = (keyCode: number): void => {\n    if (typeof this.props.refocusSuggestions === 'function') {\n      this.props.refocusSuggestions(keyCode);\n    }\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}