{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId } from '@fluentui/react-hooks';\nimport { classNamesFunction, css, divProperties, getNativeProps, getRTL, KeyCodes, warn } from '@fluentui/utilities';\nimport { CommandButton } from '../../Button';\nimport { useOverflow } from '../../utilities/useOverflow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { DirectionalHint } from '../ContextualMenu/ContextualMenu.types';\nimport { Icon } from '../Icon/Icon';\nimport { PivotItem } from './PivotItem';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Pivot';\n\nvar getTabId = function (props, pivotId, itemKey, index) {\n  if (props.getTabId) {\n    return props.getTabId(itemKey, index);\n  }\n\n  return pivotId + (\"-Tab\" + index);\n}; // Gets the set of PivotLinks as array of IPivotItemProps\n// The set of Links is determined by child components of type PivotItem\n\n\nvar getLinkItems = function (props, pivotId) {\n  var result = {\n    links: [],\n    keyToIndexMapping: {},\n    keyToTabIdMapping: {}\n  };\n  React.Children.forEach(React.Children.toArray(props.children), function (child, index) {\n    if (isPivotItem(child)) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = child.props,\n          linkText = _a.linkText,\n          pivotItemProps = __rest(_a, [\"linkText\"]);\n\n      var itemKey = child.props.itemKey || index.toString();\n      result.links.push(__assign(__assign({\n        headerText: linkText\n      }, pivotItemProps), {\n        itemKey: itemKey\n      }));\n      result.keyToIndexMapping[itemKey] = index;\n      result.keyToTabIdMapping[itemKey] = getTabId(props, pivotId, itemKey, index);\n    } else if (child) {\n      warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n    }\n  });\n  return result;\n};\n\nvar isPivotItem = function (item) {\n  var _a;\n\n  return React.isValidElement(item) && ((_a = item.type) === null || _a === void 0 ? void 0 : _a.name) === PivotItem.name;\n};\n\nexport var PivotBase = React.forwardRef(function (props, ref) {\n  var focusZoneRef = React.useRef(null);\n  var overflowMenuButtonComponentRef = React.useRef(null);\n  var pivotId = useId('Pivot');\n\n  var _a = useControllableValue(props.selectedKey, props.defaultSelectedKey),\n      selectedKey = _a[0],\n      setSelectedKey = _a[1];\n\n  var componentRef = props.componentRef,\n      theme = props.theme,\n      linkSize = props.linkSize,\n      linkFormat = props.linkFormat,\n      overflowBehavior = props.overflowBehavior,\n      overflowAriaLabel = props.overflowAriaLabel,\n      focusZoneProps = props.focusZoneProps;\n  var classNames;\n  var nameProps = {\n    'aria-label': props['aria-label'],\n    'aria-labelledby': props['aria-labelledby']\n  };\n  var divProps = getNativeProps(props, divProperties, ['aria-label', 'aria-labelledby']);\n  var linkCollection = getLinkItems(props, pivotId);\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: function () {\n        var _a;\n\n        (_a = focusZoneRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    };\n  });\n\n  var renderLinkContent = function (link) {\n    if (!link) {\n      return null;\n    }\n\n    var itemCount = link.itemCount,\n        itemIcon = link.itemIcon,\n        headerText = link.headerText;\n    return React.createElement(\"span\", {\n      className: classNames.linkContent\n    }, itemIcon !== undefined && React.createElement(\"span\", {\n      className: classNames.icon\n    }, React.createElement(Icon, {\n      iconName: itemIcon\n    })), headerText !== undefined && React.createElement(\"span\", {\n      className: classNames.text\n    }, \" \", link.headerText), itemCount !== undefined && React.createElement(\"span\", {\n      className: classNames.count\n    }, \" (\", itemCount, \")\"));\n  };\n\n  var renderPivotLink = function (renderLinkCollection, link, renderPivotLinkSelectedKey, className) {\n    var itemKey = link.itemKey,\n        headerButtonProps = link.headerButtonProps,\n        onRenderItemLink = link.onRenderItemLink;\n    var tabId = renderLinkCollection.keyToTabIdMapping[itemKey];\n    var linkContent;\n    var isSelected = renderPivotLinkSelectedKey === itemKey;\n\n    if (onRenderItemLink) {\n      linkContent = onRenderItemLink(link, renderLinkContent);\n    } else {\n      linkContent = renderLinkContent(link);\n    }\n\n    var contentString = link.headerText || '';\n    contentString += link.itemCount ? ' (' + link.itemCount + ')' : ''; // Adding space supplementary for icon\n\n    contentString += link.itemIcon ? ' xx' : '';\n    return React.createElement(CommandButton, __assign({}, headerButtonProps, {\n      id: tabId,\n      key: itemKey,\n      className: css(className, isSelected && classNames.linkIsSelected),\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick: function (ev) {\n        return onLinkClick(itemKey, ev);\n      },\n      // eslint-disable-next-line react/jsx-no-bind\n      onKeyDown: function (ev) {\n        return onKeyDown(itemKey, ev);\n      },\n      \"aria-label\": link.ariaLabel,\n      role: link.role || 'tab',\n      \"aria-selected\": isSelected,\n      name: link.headerText,\n      keytipProps: link.keytipProps,\n      \"data-content\": contentString\n    }), linkContent);\n  };\n\n  var onLinkClick = function (itemKey, ev) {\n    ev.preventDefault();\n    updateSelectedItem(itemKey, ev);\n  };\n\n  var onKeyDown = function (itemKey, ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      updateSelectedItem(itemKey);\n    }\n  };\n\n  var updateSelectedItem = function (itemKey, ev) {\n    var _a;\n\n    setSelectedKey(itemKey);\n    linkCollection = getLinkItems(props, pivotId);\n\n    if (props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      var selectedIndex = linkCollection.keyToIndexMapping[itemKey];\n      var item = React.Children.toArray(props.children)[selectedIndex];\n\n      if (isPivotItem(item)) {\n        props.onLinkClick(item, ev);\n      }\n    }\n\n    (_a = overflowMenuButtonComponentRef.current) === null || _a === void 0 ? void 0 : _a.dismissMenu();\n  };\n\n  var renderPivotItem = function (itemKey, isActive) {\n    if (props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    var index = linkCollection.keyToIndexMapping[itemKey];\n    var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n    return React.createElement(\"div\", {\n      role: \"tabpanel\",\n      hidden: !isActive,\n      key: itemKey,\n      \"aria-hidden\": !isActive,\n      \"aria-labelledby\": selectedTabId,\n      className: classNames.itemContainer\n    }, React.Children.toArray(props.children)[index]);\n  };\n\n  var isKeyValid = function (itemKey) {\n    return itemKey === null || itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  };\n\n  var getSelectedKey = function () {\n    if (isKeyValid(selectedKey)) {\n      return selectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  };\n\n  classNames = getClassNames(props.styles, {\n    theme: theme,\n    linkSize: linkSize,\n    linkFormat: linkFormat\n  });\n  var renderedSelectedKey = getSelectedKey();\n  var renderedSelectedIndex = renderedSelectedKey ? linkCollection.keyToIndexMapping[renderedSelectedKey] : 0;\n  var items = linkCollection.links.map(function (l) {\n    return renderPivotLink(linkCollection, l, renderedSelectedKey, classNames.link);\n  }); // The overflow menu starts empty and items[] is updated as the overflow items change\n\n  var overflowMenuProps = React.useMemo(function () {\n    return {\n      items: [],\n      alignTargetEdge: true,\n      directionalHint: DirectionalHint.bottomRightEdge\n    };\n  }, []);\n  var overflowMenuButtonRef = useOverflow({\n    onOverflowItemsChanged: function (overflowIndex, elements) {\n      // Set data-is-overflowing on each item\n      elements.forEach(function (_a) {\n        var ele = _a.ele,\n            isOverflowing = _a.isOverflowing;\n        return ele.dataset.isOverflowing = \"\" + isOverflowing;\n      }); // Update the menu items\n\n      overflowMenuProps.items = linkCollection.links.slice(overflowIndex).filter(function (link) {\n        return link.itemKey !== renderedSelectedKey;\n      }).map(function (link, index) {\n        return {\n          key: link.itemKey || \"\" + (overflowIndex + index),\n          onRender: function () {\n            return renderPivotLink(linkCollection, link, renderedSelectedKey, classNames.linkInMenu);\n          }\n        };\n      });\n    },\n    rtl: getRTL(theme),\n    pinnedIndex: renderedSelectedIndex\n  }).menuButtonRef;\n  return React.createElement(\"div\", __assign({\n    ref: ref\n  }, divProps), React.createElement(FocusZone, __assign({\n    componentRef: focusZoneRef,\n    role: \"tablist\"\n  }, nameProps, {\n    direction: FocusZoneDirection.horizontal\n  }, focusZoneProps, {\n    className: css(classNames.root, focusZoneProps === null || focusZoneProps === void 0 ? void 0 : focusZoneProps.className)\n  }), items, overflowBehavior === 'menu' && React.createElement(CommandButton, {\n    className: css(classNames.link, classNames.overflowMenuButton),\n    elementRef: overflowMenuButtonRef,\n    componentRef: overflowMenuButtonComponentRef,\n    menuProps: overflowMenuProps,\n    menuIconProps: {\n      iconName: 'More',\n      style: {\n        color: 'inherit'\n      }\n    },\n    ariaLabel: overflowAriaLabel\n  })), renderedSelectedKey && linkCollection.links.map(function (link) {\n    return (link.alwaysRender === true || renderedSelectedKey === link.itemKey) && renderPivotItem(link.itemKey, renderedSelectedKey === link.itemKey);\n  }));\n});\nPivotBase.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/Pivot/Pivot.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId } from '@fluentui/react-hooks';\nimport { classNamesFunction, css, divProperties, getNativeProps, getRTL, KeyCodes, warn } from '@fluentui/utilities';\nimport { CommandButton } from '../../Button';\nimport { useOverflow } from '../../utilities/useOverflow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { DirectionalHint } from '../ContextualMenu/ContextualMenu.types';\nimport { Icon } from '../Icon/Icon';\nimport { PivotItem } from './PivotItem';\nimport type { IButton } from '../../Button';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IContextualMenuProps } from '../ContextualMenu/ContextualMenu.types';\nimport type { IPivot, IPivotProps, IPivotStyleProps, IPivotStyles } from './Pivot.types';\nimport type { IPivotItemProps } from './PivotItem.types';\n\nconst getClassNames = classNamesFunction<IPivotStyleProps, IPivotStyles>();\n\nconst COMPONENT_NAME = 'Pivot';\n\ntype PivotLinkCollection = {\n  links: IPivotItemProps[];\n  keyToIndexMapping: { [key: string]: number };\n  keyToTabIdMapping: { [key: string]: string };\n};\n\nconst getTabId = (props: IPivotProps, pivotId: string, itemKey: string, index: number): string => {\n  if (props.getTabId) {\n    return props.getTabId(itemKey, index);\n  }\n  return pivotId + `-Tab${index}`;\n};\n\n// Gets the set of PivotLinks as array of IPivotItemProps\n// The set of Links is determined by child components of type PivotItem\nconst getLinkItems = (props: IPivotProps, pivotId: string): PivotLinkCollection => {\n  const result: PivotLinkCollection = {\n    links: [],\n    keyToIndexMapping: {},\n    keyToTabIdMapping: {},\n  };\n\n  React.Children.forEach(React.Children.toArray(props.children), (child: React.ReactNode, index: number) => {\n    if (isPivotItem(child)) {\n      // eslint-disable-next-line deprecation/deprecation\n      const { linkText, ...pivotItemProps } = child.props;\n      const itemKey = child.props.itemKey || index.toString();\n      result.links.push({\n        headerText: linkText,\n        ...pivotItemProps,\n        itemKey: itemKey,\n      });\n      result.keyToIndexMapping[itemKey] = index;\n      result.keyToTabIdMapping[itemKey] = getTabId(props, pivotId, itemKey, index);\n    } else if (child) {\n      warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n    }\n  });\n  return result;\n};\n\nconst isPivotItem = (item: React.ReactNode): item is PivotItem => {\n  return React.isValidElement(item) && (item.type as React.ComponentType)?.name === PivotItem.name;\n};\n\nexport const PivotBase: React.FunctionComponent<IPivotProps> = React.forwardRef<HTMLDivElement, IPivotProps>(\n  (props, ref) => {\n    const focusZoneRef = React.useRef<IFocusZone>(null);\n    const overflowMenuButtonComponentRef = React.useRef<IButton>(null);\n    const pivotId: string = useId('Pivot');\n\n    const [selectedKey, setSelectedKey] = useControllableValue(props.selectedKey, props.defaultSelectedKey);\n\n    const { componentRef, theme, linkSize, linkFormat, overflowBehavior, overflowAriaLabel, focusZoneProps } = props;\n\n    let classNames: { [key in keyof IPivotStyles]: string };\n    const nameProps = {\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n    };\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, [\n      'aria-label',\n      'aria-labelledby',\n    ]);\n\n    let linkCollection = getLinkItems(props, pivotId);\n\n    React.useImperativeHandle(componentRef as React.RefObject<IPivot>, () => ({\n      focus: () => {\n        focusZoneRef.current?.focus();\n      },\n    }));\n\n    const renderLinkContent = (link?: IPivotItemProps): JSX.Element | null => {\n      if (!link) {\n        return null;\n      }\n\n      const { itemCount, itemIcon, headerText } = link;\n      return (\n        <span className={classNames.linkContent}>\n          {itemIcon !== undefined && (\n            <span className={classNames.icon}>\n              <Icon iconName={itemIcon} />\n            </span>\n          )}\n          {headerText !== undefined && <span className={classNames.text}> {link.headerText}</span>}\n          {itemCount !== undefined && <span className={classNames.count}> ({itemCount})</span>}\n        </span>\n      );\n    };\n\n    const renderPivotLink = (\n      renderLinkCollection: PivotLinkCollection,\n      link: IPivotItemProps,\n      renderPivotLinkSelectedKey: string | null | undefined,\n      className: string,\n    ): JSX.Element => {\n      const { itemKey, headerButtonProps, onRenderItemLink } = link;\n      const tabId = renderLinkCollection.keyToTabIdMapping[itemKey!];\n      let linkContent: JSX.Element | null;\n      const isSelected: boolean = renderPivotLinkSelectedKey === itemKey;\n\n      if (onRenderItemLink) {\n        linkContent = onRenderItemLink(link, renderLinkContent);\n      } else {\n        linkContent = renderLinkContent(link);\n      }\n\n      let contentString = link.headerText || '';\n      contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';\n      // Adding space supplementary for icon\n      contentString += link.itemIcon ? ' xx' : '';\n      return (\n        <CommandButton\n          {...headerButtonProps}\n          id={tabId}\n          key={itemKey}\n          className={css(className, isSelected && classNames.linkIsSelected)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={(ev: React.MouseEvent<HTMLElement>) => onLinkClick(itemKey!, ev)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onKeyDown={(ev: React.KeyboardEvent<HTMLElement>) => onKeyDown(itemKey!, ev)}\n          aria-label={link.ariaLabel}\n          role={link.role || 'tab'}\n          aria-selected={isSelected}\n          name={link.headerText}\n          keytipProps={link.keytipProps}\n          data-content={contentString}\n        >\n          {linkContent}\n        </CommandButton>\n      );\n    };\n\n    const onLinkClick = (itemKey: string, ev: React.MouseEvent<HTMLElement>): void => {\n      ev.preventDefault();\n      updateSelectedItem(itemKey, ev);\n    };\n\n    const onKeyDown = (itemKey: string, ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n        updateSelectedItem(itemKey);\n      }\n    };\n\n    const updateSelectedItem = (itemKey: string, ev?: React.MouseEvent<HTMLElement>): void => {\n      setSelectedKey(itemKey);\n      linkCollection = getLinkItems(props, pivotId);\n      if (props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n        const selectedIndex = linkCollection.keyToIndexMapping[itemKey];\n        const item = React.Children.toArray(props.children)[selectedIndex];\n        if (isPivotItem(item)) {\n          props.onLinkClick(item, ev);\n        }\n      }\n\n      overflowMenuButtonComponentRef.current?.dismissMenu();\n    };\n\n    const renderPivotItem = (itemKey: string | undefined, isActive: boolean): JSX.Element | null => {\n      if (props.headersOnly || !itemKey) {\n        return null;\n      }\n\n      const index = linkCollection.keyToIndexMapping[itemKey];\n      const selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n      return (\n        <div\n          role=\"tabpanel\"\n          hidden={!isActive}\n          key={itemKey}\n          aria-hidden={!isActive}\n          aria-labelledby={selectedTabId}\n          className={classNames.itemContainer}\n        >\n          {React.Children.toArray(props.children)[index]}\n        </div>\n      );\n    };\n\n    const isKeyValid = (itemKey: string | null | undefined): boolean => {\n      return itemKey === null || (itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined);\n    };\n\n    const getSelectedKey = () => {\n      if (isKeyValid(selectedKey)) {\n        return selectedKey;\n      }\n      if (linkCollection.links.length) {\n        return linkCollection.links[0].itemKey;\n      }\n      return undefined;\n    };\n\n    classNames = getClassNames(props.styles!, {\n      theme: theme!,\n      linkSize,\n      linkFormat,\n    });\n\n    const renderedSelectedKey = getSelectedKey();\n    const renderedSelectedIndex = renderedSelectedKey ? linkCollection.keyToIndexMapping[renderedSelectedKey] : 0;\n\n    const items = linkCollection.links.map(l =>\n      renderPivotLink(linkCollection, l, renderedSelectedKey, classNames.link),\n    );\n\n    // The overflow menu starts empty and items[] is updated as the overflow items change\n    const overflowMenuProps: IContextualMenuProps = React.useMemo(\n      () => ({\n        items: [],\n        alignTargetEdge: true,\n        directionalHint: DirectionalHint.bottomRightEdge,\n      }),\n      [],\n    );\n\n    const { menuButtonRef: overflowMenuButtonRef } = useOverflow({\n      onOverflowItemsChanged: (overflowIndex, elements) => {\n        // Set data-is-overflowing on each item\n        elements.forEach(({ ele, isOverflowing }) => (ele.dataset.isOverflowing = `${isOverflowing}`));\n\n        // Update the menu items\n        overflowMenuProps.items = linkCollection.links\n          .slice(overflowIndex)\n          .filter(link => link.itemKey !== renderedSelectedKey)\n          .map((link, index) => {\n            return {\n              key: link.itemKey || `${overflowIndex + index}`,\n              onRender: () => renderPivotLink(linkCollection, link, renderedSelectedKey, classNames.linkInMenu),\n            };\n          });\n      },\n      rtl: getRTL(theme),\n      pinnedIndex: renderedSelectedIndex,\n    });\n\n    return (\n      <div ref={ref} {...divProps}>\n        <FocusZone\n          componentRef={focusZoneRef}\n          role=\"tablist\"\n          {...nameProps}\n          direction={FocusZoneDirection.horizontal}\n          {...focusZoneProps}\n          className={css(classNames.root, focusZoneProps?.className)}\n        >\n          {items}\n          {overflowBehavior === 'menu' && (\n            <CommandButton\n              className={css(classNames.link, classNames.overflowMenuButton)}\n              elementRef={overflowMenuButtonRef}\n              componentRef={overflowMenuButtonComponentRef}\n              menuProps={overflowMenuProps}\n              menuIconProps={{ iconName: 'More', style: { color: 'inherit' } }}\n              ariaLabel={overflowAriaLabel}\n            />\n          )}\n        </FocusZone>\n        {renderedSelectedKey &&\n          linkCollection.links.map(\n            link =>\n              (link.alwaysRender === true || renderedSelectedKey === link.itemKey) &&\n              renderPivotItem(link.itemKey, renderedSelectedKey === link.itemKey),\n          )}\n      </div>\n    );\n  },\n);\nPivotBase.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}