{"ast":null,"code":"var _jsxFileName = \"D:\\\\InternshipAccesa\\\\Traveltech\\\\src\\\\questpage\\\\QuestPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { CommandBar, DetailsList, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\nimport { DetailsListLayoutMode, Selection, SelectionMode } from '@fluentui/react/lib/DetailsList';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../auth/AuthProvider\";\nimport { QuestService } from \"../utils/service\";\nimport { getByRequestUrl, getViewportAsPixels, loggedUser, setSelectedQuest, selectedQuest, setLoggedUser, getDefaultUser } from \"../utils/utilsMethods\";\nimport { commandBarStyles, defaultMenuItemStyle, detailsListColumnStyle, enabledMenuItemStyle, itemStyle, itemStyleForLastColumn, setGapBetweenHeaders, setGapBetweenHeadersAndDetailsList, setGapBetweenHeadersAndUserInfo, transparentTheme } from \"./QuestPage.styles\";\nimport { ADD, EDIT, VIEW_BADGES, LOGOUT } from \"../utils/generalConstants\";\nimport SaveQuestModal from \"./questAll/SaveQuestModal\";\nimport EditQuestModal from \"./questAll/EditQuestModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TASK_COLUMN = \"Task\";\nconst CORRECT_ANSWER_COLUMN = \"Correct Answer\";\nconst ANSWER_COLUMN = \"Answer\";\nconst TOKENS_COLUMN = \"Tokens\";\nconst CREATED_BY_COLUMN = \"User\";\n\nconst getColumnName = (task, correct_answer, answer, tokens, user, name) => {\n  return name === task ? task : name === correct_answer ? correct_answer : name === answer ? answer : name === tokens ? tokens : name === user ? user : name;\n};\n\nconst getFieldName = columnName => {\n  return columnName === TASK_COLUMN ? \"task\" : columnName === CORRECT_ANSWER_COLUMN ? \"correct_answer\" : columnName === ANSWER_COLUMN ? \"answer\" : columnName === TOKENS_COLUMN ? \"tokens\" : columnName === CREATED_BY_COLUMN ? \"user\" : \"\";\n};\n\nconst getColumn = (pageWidth, name) => {\n  return {\n    key: name,\n    name: getColumnName(TASK_COLUMN, CORRECT_ANSWER_COLUMN, ANSWER_COLUMN, TOKENS_COLUMN, CREATED_BY_COLUMN, name),\n    fieldName: getFieldName(name),\n    minWidth: getViewportAsPixels(pageWidth, 10),\n    maxWidth: getViewportAsPixels(pageWidth, 20),\n    isResizable: true,\n    isMultiline: true,\n    styles: detailsListColumnStyle\n  };\n};\n\nconst getColumns = (pageWidth, names) => {\n  return names.map(name => getColumn(pageWidth, name));\n};\n\nexport const getListItemFromQuest = quest => {\n  return {\n    id: quest.id,\n    task: quest.task,\n    correct_answer: quest.correct_answer,\n    answer: quest.answer,\n    tokens: quest.tokens,\n    user: `${quest.user.firstName}${\" \"}${quest.user.lastName}`\n  };\n};\n\nconst renderItemColumn = (item, index, column) => {\n  const fieldContent = item[column.fieldName];\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: column.fieldName !== \"created\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: itemStyle,\n      children: fieldContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: itemStyleForLastColumn,\n      children: fieldContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n\nconst getQuestForCurrentUser = allQuests => {\n  return allQuests.map(item => getListItemFromQuest(item));\n};\n\nconst getMenuItem = name => {\n  return {\n    key: name,\n    text: name,\n    iconProps: {\n      iconName: name\n    }\n  };\n};\n\nconst getMenuItems = names => {\n  return names.map(name => getMenuItem(name));\n};\n\nconst QuestPage = props => {\n  _s();\n\n  const {\n    isAuthenticated\n  } = useAuth();\n  const navigate = useNavigate();\n  const [items, setItems] = useState([]);\n  const [selectedItems, setSelectedItems] = useState(undefined);\n  const [quests, setQuests] = useState([]);\n  const [selection] = useState(() => new Selection({\n    onSelectionChanged: () => {\n      const selectedItems = selection.getSelection();\n      const selected = selectedItems[0];\n      setSelectedQuest(selected);\n      setSelectedItems(selectedItems);\n    }\n  }));\n  const columns = getColumns(props.pageWidth, [TASK_COLUMN, CORRECT_ANSWER_COLUMN, ANSWER_COLUMN, TOKENS_COLUMN, CREATED_BY_COLUMN]);\n  const menuItems = getMenuItems([ADD, EDIT, VIEW_BADGES, LOGOUT]);\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate(\"/login\");\n    }\n  }, [isAuthenticated]);\n  useEffect(() => {\n    getAllQuests();\n  }, []);\n  const [isSaving, setIsSaving] = useState(false);\n  const switchSavingMode = useCallback(() => setIsSaving(isSaving => !isSaving), []);\n  const [isEditing, setIsEditing] = useState(false);\n  const switchEditingMode = useCallback(() => setIsEditing(isEditing => !isEditing), []);\n\n  const getAllQuests = async () => {\n    const allQuests = await getByRequestUrl(`${QuestService.GET_ALL_QUESTS}`);\n    setItems(getQuestForCurrentUser(allQuests));\n    setQuests(allQuests);\n  };\n\n  const getSelectedQuest = () => {\n    const index = quests.findIndex(it => it.id === selectedQuest.id);\n    return quests[index];\n  };\n\n  const getSelectedItem = () => {\n    return selectedItems[0];\n  };\n\n  const getTitle = () => {\n    return `${\"QuestPage page, you have \"}${loggedUser.tokens}${\" remaining!\"}`;\n  };\n\n  const isEditOrDeleteDisabled = checkEdit => {\n    if (!selectedItems) return true;\n\n    if (checkEdit) {\n      if (selectedItems.length !== 1) return true;\n    } else if (selectedItems.length < 1) return true;\n\n    return false;\n  };\n\n  const onViewClicked = () => {\n    if (isAuthenticated) {\n      navigate(\"/badges\");\n    }\n  };\n\n  const onLogOutClicked = () => {\n    setLoggedUser(getDefaultUser());\n    navigate(\"/\");\n  };\n\n  const onAddClicked = () => {\n    switchSavingMode();\n  };\n\n  const onEditClicked = () => {\n    if (quests.find(us => us.id === selectedQuest.id) !== undefined) {\n      switchEditingMode();\n    }\n  };\n\n  const updateMenuItems = () => {\n    return menuItems.map(item => {\n      switch (item.key) {\n        case ADD:\n          item.onClick = () => onAddClicked();\n\n          item.style = enabledMenuItemStyle;\n          break;\n\n        case VIEW_BADGES:\n          item.onClick = () => onViewClicked();\n\n          item.style = enabledMenuItemStyle;\n          break;\n\n        case LOGOUT:\n          item.onClick = () => onLogOutClicked();\n\n          item.style = enabledMenuItemStyle;\n          break;\n\n        case EDIT:\n          item.disabled = isEditOrDeleteDisabled(true);\n\n          item.onClick = () => onEditClicked();\n\n          item.style = (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) === 1 ? enabledMenuItemStyle : defaultMenuItemStyle;\n          break;\n\n        default:\n          return item;\n      }\n\n      return item;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isSaving && /*#__PURE__*/_jsxDEV(SaveQuestModal, {\n      switchMode: switchSavingMode,\n      items: items,\n      setItems: setItems,\n      quests: quests,\n      setQuests: setQuests\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(EditQuestModal, {\n      switchMode: switchEditingMode,\n      quest: getSelectedQuest(),\n      items: items,\n      setItems: setItems,\n      quests: quests,\n      setQuests: setQuests,\n      user: loggedUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      className: \"hero is-fullheight has-background-dark\",\n      tokens: setGapBetweenHeadersAndDetailsList,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        horizontal: true,\n        tokens: setGapBetweenHeadersAndUserInfo,\n        children: /*#__PURE__*/_jsxDEV(StackItem, {\n          tokens: setGapBetweenHeaders,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title has-text-white is-size-3 marginFH2\",\n            children: [\" \", getTitle(), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(StackItem, {\n        children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n          theme: transparentTheme,\n          children: [/*#__PURE__*/_jsxDEV(CommandBar, {\n            items: updateMenuItems(),\n            styles: commandBarStyles\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(DetailsList, {\n            className: \"hero is-fullheight has-background-dark\",\n            items: items,\n            setKey: \"set\",\n            columns: columns,\n            selectionMode: SelectionMode.single,\n            layoutMode: DetailsListLayoutMode.justified,\n            selection: selection,\n            selectionPreservedOnEmptyClick: true,\n            onRenderItemColumn: renderItemColumn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestPage, \"Tv+sghwQh9hZSvY6z37RbZKeaMQ=\", false, function () {\n  return [useAuth, useNavigate];\n});\n\n_c = QuestPage;\nexport default QuestPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestPage\");","map":{"version":3,"sources":["D:/InternshipAccesa/Traveltech/src/questpage/QuestPage.tsx"],"names":["CommandBar","DetailsList","Stack","StackItem","ThemeProvider","DetailsListLayoutMode","Selection","SelectionMode","React","useCallback","useEffect","useState","useNavigate","useAuth","QuestService","getByRequestUrl","getViewportAsPixels","loggedUser","setSelectedQuest","selectedQuest","setLoggedUser","getDefaultUser","commandBarStyles","defaultMenuItemStyle","detailsListColumnStyle","enabledMenuItemStyle","itemStyle","itemStyleForLastColumn","setGapBetweenHeaders","setGapBetweenHeadersAndDetailsList","setGapBetweenHeadersAndUserInfo","transparentTheme","ADD","EDIT","VIEW_BADGES","LOGOUT","SaveQuestModal","EditQuestModal","TASK_COLUMN","CORRECT_ANSWER_COLUMN","ANSWER_COLUMN","TOKENS_COLUMN","CREATED_BY_COLUMN","getColumnName","task","correct_answer","answer","tokens","user","name","getFieldName","columnName","getColumn","pageWidth","key","fieldName","minWidth","maxWidth","isResizable","isMultiline","styles","getColumns","names","map","getListItemFromQuest","quest","id","firstName","lastName","renderItemColumn","item","index","column","fieldContent","getQuestForCurrentUser","allQuests","getMenuItem","text","iconProps","iconName","getMenuItems","QuestPage","props","isAuthenticated","navigate","items","setItems","selectedItems","setSelectedItems","undefined","quests","setQuests","selection","onSelectionChanged","getSelection","selected","columns","menuItems","getAllQuests","isSaving","setIsSaving","switchSavingMode","isEditing","setIsEditing","switchEditingMode","GET_ALL_QUESTS","getSelectedQuest","findIndex","it","getSelectedItem","getTitle","isEditOrDeleteDisabled","checkEdit","length","onViewClicked","onLogOutClicked","onAddClicked","onEditClicked","find","us","updateMenuItems","onClick","style","disabled","single","justified"],"mappings":"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","sourcesContent":["import { CommandBar, DetailsList, IColumn, IContextualMenuItem, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\r\nimport { DetailsListLayoutMode, IObjectWithKey, Selection, SelectionMode } from '@fluentui/react/lib/DetailsList';\r\nimport React, {useCallback, useEffect, useState} from \"react\";\r\nimport { useNavigate} from \"react-router-dom\";\r\nimport { useAuth } from \"../auth/AuthProvider\";\r\nimport { QuestDetailsListItem } from \"../model/IQuestDetailsListItem\";\r\nimport { QuestService } from \"../utils/service\";\r\nimport {\r\n    getByRequestUrl,\r\n    getViewportAsPixels,\r\n    loggedUser,\r\n    setSelectedQuest,\r\n    selectedQuest,\r\n    setLoggedUser, getDefaultUser\r\n} from \"../utils/utilsMethods\";\r\nimport {commandBarStyles, defaultMenuItemStyle, detailsListColumnStyle, enabledMenuItemStyle, itemStyle, itemStyleForLastColumn, setGapBetweenHeaders, setGapBetweenHeadersAndDetailsList, setGapBetweenHeadersAndUserInfo, setStyleForUserName, transparentTheme} from \"./QuestPage.styles\";\r\nimport {IQuestProps} from \"../model/IQuestProps\";\r\nimport {Quest} from \"../model/IQuest\";\r\nimport {ADD, EDIT, VIEW_BADGES, LOGOUT} from \"../utils/generalConstants\";\r\nimport SaveQuestModal from \"./questAll/SaveQuestModal\";\r\nimport EditQuestModal from \"./questAll/EditQuestModal\";\r\n\r\nconst TASK_COLUMN: string = \"Task\";\r\nconst CORRECT_ANSWER_COLUMN: string = \"Correct Answer\";\r\nconst ANSWER_COLUMN: string = \"Answer\";\r\nconst TOKENS_COLUMN: string = \"Tokens\";\r\nconst CREATED_BY_COLUMN: string = \"User\";\r\n\r\nconst getColumnName = (task: string, correct_answer: string, answer: string, tokens: string, user: string, name: string): string => {\r\n    return name === task\r\n        ? task\r\n        : name === correct_answer\r\n            ? correct_answer\r\n            : name === answer\r\n                ? answer\r\n                : name === tokens\r\n                    ? tokens\r\n                    : name === user\r\n                        ? user\r\n                    : name;\r\n};\r\n\r\nconst getFieldName = (columnName: string): string => {\r\n    return columnName === TASK_COLUMN\r\n        ? \"task\"\r\n        : columnName === CORRECT_ANSWER_COLUMN\r\n            ? \"correct_answer\"\r\n            : columnName === ANSWER_COLUMN\r\n                ? \"answer\"\r\n                : columnName === TOKENS_COLUMN\r\n                    ? \"tokens\"\r\n                    : columnName === CREATED_BY_COLUMN\r\n                        ? \"user\"\r\n                        : \"\";\r\n};\r\n\r\nconst getColumn = (pageWidth: number, name: string): IColumn => {\r\n    return {\r\n        key: name,\r\n        name: getColumnName(TASK_COLUMN,CORRECT_ANSWER_COLUMN,ANSWER_COLUMN,TOKENS_COLUMN, CREATED_BY_COLUMN, name),\r\n        fieldName: getFieldName(name),\r\n        minWidth: getViewportAsPixels(pageWidth, 10),\r\n        maxWidth: getViewportAsPixels(pageWidth, 20),\r\n        isResizable: true,\r\n        isMultiline: true,\r\n        styles: detailsListColumnStyle,\r\n    };\r\n};\r\n\r\nconst getColumns = (pageWidth: number, names: string[]): IColumn[] => {\r\n    return names.map((name: string) => getColumn(pageWidth, name));\r\n};\r\n\r\nexport const getListItemFromQuest = (quest : Quest): QuestDetailsListItem => {\r\n    return {\r\n        id: quest.id,\r\n        task: quest.task,\r\n        correct_answer: quest.correct_answer,\r\n        answer: quest.answer,\r\n        tokens: quest.tokens,\r\n        user: `${quest.user.firstName}${\" \"}${quest.user.lastName}`,\r\n    };\r\n};\r\n\r\nconst renderItemColumn = (item: any, index?: number, column?: IColumn): React.ReactFragment => {\r\n    const fieldContent = item[column!.fieldName as keyof QuestDetailsListItem] as string;\r\n    \r\n    return (\r\n        <React.Fragment>\r\n      {column!.fieldName !== \"created\"\r\n        ? <span className={itemStyle}>{fieldContent}</span>\r\n        : <span className={itemStyleForLastColumn}>{fieldContent}</span>\r\n      }\r\n    </React.Fragment>\r\n    );\r\n};\r\n\r\nconst getQuestForCurrentUser = (allQuests: Quest[]): QuestDetailsListItem[] => {\r\n    return allQuests.map((item) => getListItemFromQuest(item) );\r\n};\r\n\r\nconst getMenuItem = (name: string): IContextualMenuItem => {\r\n    return {\r\n        key: name,\r\n        text: name,\r\n        iconProps: { iconName: name }\r\n    }\r\n  };\r\n  \r\n  const getMenuItems = (names: string[]): IContextualMenuItem[] => {\r\n    return names.map((name: string) => getMenuItem(name));\r\n  };\r\n\r\nconst QuestPage = (props: IQuestProps): JSX.Element => {\r\n    const { isAuthenticated } = useAuth();\r\n    const navigate = useNavigate();\r\n    const [items, setItems] = useState<QuestDetailsListItem[]>([]);\r\n    const [selectedItems, setSelectedItems] = useState<IObjectWithKey[] | undefined>(undefined);\r\n    const [quests, setQuests] = useState<Quest[]>([]);\r\n    const [selection] = useState<Selection>(() => new Selection({\r\n        onSelectionChanged: () => {\r\n            const selectedItems: IObjectWithKey[] = selection.getSelection();\r\n            const selected: QuestDetailsListItem = selectedItems[0] as QuestDetailsListItem;\r\n            setSelectedQuest(selected);\r\n            setSelectedItems(selectedItems);\r\n        }\r\n    }));\r\n    const columns: IColumn[] = getColumns(props.pageWidth, [TASK_COLUMN, CORRECT_ANSWER_COLUMN, ANSWER_COLUMN, TOKENS_COLUMN, CREATED_BY_COLUMN]);\r\n    const menuItems: IContextualMenuItem[] = getMenuItems([ADD, EDIT, VIEW_BADGES, LOGOUT]);\r\n\r\n    useEffect(() => {\r\n        if (!isAuthenticated) {\r\n            navigate(\"/login\");\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    useEffect(() => {\r\n        getAllQuests();\r\n    }, []);\r\n\r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const switchSavingMode = useCallback(\r\n        () => setIsSaving((isSaving) => !isSaving),\r\n        []\r\n    );\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const switchEditingMode = useCallback(\r\n        () => setIsEditing((isEditing) => !isEditing),\r\n        []\r\n    );\r\n\r\n    const getAllQuests = async () => {\r\n        const allQuests: Quest[] = await getByRequestUrl(`${QuestService.GET_ALL_QUESTS}`);\r\n        setItems(getQuestForCurrentUser(allQuests));\r\n        setQuests(allQuests)\r\n    };\r\n\r\n    const getSelectedQuest = (): Quest => {\r\n        const index = quests.findIndex((it) => it.id === selectedQuest.id);\r\n        return quests[index];\r\n    };\r\n\r\n    const getSelectedItem = (): IObjectWithKey => {\r\n        return selectedItems![0];\r\n    };\r\n\r\n    const getTitle = (): string => {\r\n        return `${\"QuestPage page, you have \"}${loggedUser.tokens}${ \" remaining!\"}`;\r\n    };\r\n\r\n    const isEditOrDeleteDisabled = (checkEdit: boolean): boolean => {\r\n        if (!selectedItems)\r\n            return true;\r\n    \r\n        if (checkEdit) {\r\n            if (selectedItems.length !== 1)\r\n                return true;\r\n        }\r\n        else\r\n            if (selectedItems.length < 1)\r\n                return true;\r\n        return false;\r\n      };\r\n\r\n    const onViewClicked = (): void => {\r\n        if (isAuthenticated) {\r\n            navigate(\"/badges\");\r\n        }\r\n    };\r\n\r\n    const onLogOutClicked = (): void => {\r\n        setLoggedUser(getDefaultUser());\r\n        navigate(\"/\");\r\n    };\r\n\r\n    const onAddClicked = (): void => {\r\n        switchSavingMode();\r\n    };\r\n\r\n    const onEditClicked = (): void => {\r\n        if (quests.find((us) => us.id === selectedQuest.id) !== undefined) {\r\n            switchEditingMode();\r\n        }\r\n    };\r\n\r\n    const updateMenuItems = (): IContextualMenuItem[] => {\r\n        return menuItems.map((item: IContextualMenuItem) => {\r\n            switch (item.key) {\r\n                case ADD:\r\n                    item.onClick = () => onAddClicked();\r\n                    item.style = enabledMenuItemStyle;\r\n                    break;\r\n                case VIEW_BADGES:\r\n                    item.onClick = () => onViewClicked();\r\n                    item.style = enabledMenuItemStyle\r\n                    break;\r\n                case LOGOUT:\r\n                    item.onClick = () => onLogOutClicked();\r\n                    item.style = enabledMenuItemStyle\r\n                    break;\r\n                case EDIT:\r\n                    item.disabled = isEditOrDeleteDisabled(true);\r\n                    item.onClick = () => onEditClicked();\r\n                    item.style =\r\n                        selectedItems?.length === 1\r\n                            ? enabledMenuItemStyle\r\n                            : defaultMenuItemStyle;\r\n                    break;\r\n                default:\r\n                    return item;\r\n            }\r\n            return item;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {isSaving && (\r\n            <SaveQuestModal\r\n                switchMode={switchSavingMode}\r\n                items={items}\r\n                setItems={setItems}\r\n                quests = {quests}\r\n                setQuests = {setQuests}\r\n            />\r\n        )}\r\n        {isEditing && (\r\n            <EditQuestModal\r\n                switchMode={switchEditingMode}\r\n                quest={getSelectedQuest()}\r\n                items={items}\r\n                setItems={setItems}\r\n                quests={quests}\r\n                setQuests={setQuests}\r\n                user = {loggedUser}\r\n            />\r\n         )}\r\n        <Stack className=\"hero is-fullheight has-background-dark\" tokens={setGapBetweenHeadersAndDetailsList}>\r\n            <Stack horizontal tokens={setGapBetweenHeadersAndUserInfo}>\r\n                <StackItem tokens={setGapBetweenHeaders}>\r\n                    <p className=\"title has-text-white is-size-3 marginFH2\"> {getTitle()} </p>\r\n                </StackItem>\r\n            </Stack>\r\n            <StackItem>\r\n                <ThemeProvider theme={transparentTheme}>\r\n                    <CommandBar items={updateMenuItems()} styles={commandBarStyles} />\r\n                    <DetailsList className=\"hero is-fullheight has-background-dark\"\r\n                        items={items}\r\n                        setKey=\"set\"\r\n                        columns={columns}\r\n                        selectionMode={SelectionMode.single}\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selection={selection}\r\n                        selectionPreservedOnEmptyClick={true}\r\n                        onRenderItemColumn={renderItemColumn}>\r\n                    </DetailsList>\r\n                </ThemeProvider>\r\n            </StackItem>\r\n        </Stack>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestPage;\r\n"]},"metadata":{},"sourceType":"module"}