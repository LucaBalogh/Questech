{"ast":null,"code":"// import { CommandBar, DetailsList, IColumn, IContextualMenuItem, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\n// import { DetailsListLayoutMode, IObjectWithKey, Selection, SelectionMode } from \"@fluentui/react/lib/DetailsList\";\n// import React, {useCallback, useEffect, useState} from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { useAuth } from \"../auth/AuthProvider\";\n// import { IMainPageProps } from \"../model/IMainPageProps\";\n// import { LocationDetailsListItem } from \"../model/ILocationDetailsListItem\";\n// import {VIEW_LOCATIONS, ADD} from \"../utils/generalConstants\";\n// import SaveLocationMainModal from \"./dashboard/SaveLocationMainModal\";\n// import { LocationMainService } from \"../utils/service\";\n// import {\n//   getViewportAsPixels,\n//   getByRequestUrl,\n//   loggedUser, setSelectedLocation, selectedLocation\n// } from \"../utils/utilsMethods\";\n// import {\n//   commandBarStyles,\n//   defaultMenuItemStyle,\n//   detailsListColumnStyle,\n//   itemStyle,\n//   enabledMenuItemStyle,\n//   setGapBetweenHeaders,\n//   setGapBetweenHeadersAndDetailsList,\n//   transparentTheme,\n//   itemStyleForLastColumn,\n//   setGapBetweenHeadersAndUserInfo, setStyleForUserName\n// } from \"./MainPage.styles\";\n// import LoginFoot from \"../images/foot.svg\";\n// import {Location} from \"../model/ILocation\";\n// import SaveLocationModal from \"../locationpage/locationAll/SaveLocationModal\";\n// import EditUserStoryModal from \"../locationpage/locationAll/EditLocationModal\";\n//\n// const CITY_COLUMN: string = \"City\";\n// const COUNTRY_COLUMN: string = \"Country\";\n// const TIP_COLUMN: string = \"Tip\";\n// const RATING_COLUMN: string = \"Rating\";\n// const CREATED_BY_COLUMN: string = \"User\";\n// const BACKLOG_TITLE: string = \"Top 10 Locations\";\n//\n// const getColumnName = (city: string, country: string, tip: string, rating: string, user: string, name: string): string => {\n//   return name === city\n//     ? city\n//     : name === country\n//     ? country\n//     : name === tip\n//     ? tip\n//     : name === rating\n//     ? rating\n//     : name === user\n//     ? user: name;\n// };\n//\n// const getFieldName = (columnName: string): string => {\n//   return columnName === CITY_COLUMN\n//     ? \"city\"\n//     : columnName === COUNTRY_COLUMN\n//     ? \"country\"\n//     : columnName === TIP_COLUMN\n//     ? \"tip\"\n//     : columnName === RATING_COLUMN\n//     ? \"rating\"\n//     : columnName === CREATED_BY_COLUMN\n//     ? \"user\"\n//     : \"\";\n// };\n//\n// const getColumn = (pageWidth: number, name: string): IColumn => {\n//   return {\n//     key: name,\n//     name: getColumnName(CITY_COLUMN,COUNTRY_COLUMN,TIP_COLUMN,RATING_COLUMN,CREATED_BY_COLUMN,name),\n//     fieldName: getFieldName(name),\n//     minWidth: getViewportAsPixels(pageWidth, 10),\n//     maxWidth: getViewportAsPixels(pageWidth, 20),\n//     isResizable: true,\n//     isMultiline: true,\n//     styles: detailsListColumnStyle,\n//   };\n// };\n//\n// const getColumns = (pageWidth: number, names: string[]): IColumn[] => {\n//   return names.map((name: string) => getColumn(pageWidth, name));\n// };\n//\n// export const getListItemFromMainPage = (locationMain: Location): LocationDetailsListItem => {\n//   return {\n//     id: locationMain.id,\n//     city: locationMain.city,\n//     country: locationMain.country,\n//     tip: locationMain.tip,\n//     rating: locationMain.rating,\n//     user: `${locationMain.user.firstName}${\" \"}${locationMain.user.lastName}`,\n//   };\n// };\n//\n// const renderItemColumn = (item: any, index?: number, column?: IColumn): React.ReactFragment => {\n//   const fieldContent = item[column!.fieldName as keyof LocationDetailsListItem] as string;\n//\n//   return (\n//     <React.Fragment>\n//       {column!.fieldName !== \"created\"\n//         ? <span className={itemStyle}>{fieldContent}</span>\n//         : <span className={itemStyleForLastColumn}>{fieldContent}</span>\n//       }\n//     </React.Fragment>\n//   );\n// };\n//\n// const getLocationMain = (allLocations: Location[]): LocationDetailsListItem[] => {\n//   return allLocations.map((item) => getListItemFromMainPage(item));\n// };\n//\n// const getMenuItem = (name: string): IContextualMenuItem => {\n//   return {\n//     key: name,\n//     text: name,\n//     iconProps: { iconName: name },\n//   };\n// };\n//\n// const getMenuItems = (names: string[]): IContextualMenuItem[] => {\n//   return names.map((name: string) => getMenuItem(name));\n// };\n//\n// const MainPage = (props: IMainPageProps): JSX.Element => {\n//   const { isAuthenticated } = useAuth();\n//   const navigate = useNavigate();\n//   const [items, setItems] = useState<LocationDetailsListItem[]>([]);\n//   const [locationMain, setLocationMain] = useState<Location[]>([]);\n//   const [selectedItems, setSelectedItems] = useState<IObjectWithKey[] | undefined>(undefined);\n//   const [selection] = useState<Selection>(\n//     () =>\n//       new Selection({\n//         onSelectionChanged: () => {\n//           const selectedItems: IObjectWithKey[] = selection.getSelection();\n//           const selected: LocationDetailsListItem = selectedItems[0] as LocationDetailsListItem;\n//           setSelectedLocation(selected);\n//           setSelectedItems(selectedItems);\n//         }\n//       })\n//   );\n//\n//   const columns: IColumn[] = getColumns(props.pageWidth, [CITY_COLUMN, COUNTRY_COLUMN, TIP_COLUMN, RATING_COLUMN, CREATED_BY_COLUMN]);\n//   const menuItems: IContextualMenuItem[] = getMenuItems([ADD, VIEW_LOCATIONS]);\n//\n//   useEffect(() => {\n//     if (!isAuthenticated) {\n//       navigate(\"/login\");\n//     }\n//   }, [isAuthenticated]);\n//\n//   useEffect(() => {\n//     getAllLocationsMain();\n//   }, []);\n//\n//   const [isSaving, setIsSaving] = useState(false);\n//   const switchSavingMode = useCallback(\n//       () => setIsSaving((isSaving) => !isSaving),\n//       []\n//   );\n//\n//\n//     const getAllLocationsMain = async () => {\n//       const allLocations: Location[] = await getByRequestUrl(`${LocationMainService.GET_ALL}`);\n//       setItems(getLocationMain(allLocations));\n//       setLocationMain(allLocations);\n//     };\n//\n//   const getSelectedLocation = (): Location => {\n//     const index = locationMain.findIndex((it) => it.id === selectedLocation.id);\n//     return locationMain[index];\n//   };\n//\n//   const getSelectedItem = (): IObjectWithKey => {\n//     return selectedItems![0];\n//   };\n//\n//   const getTitle = (): string => {\n//     return `${\"Welcome back, \"}${loggedUser.firstName}${ \" \"}${loggedUser.lastName}${\"!\"}`;\n//   };\n//\n//   const isSaveOrDeleteDisabled = (checkEdit: boolean): boolean => {\n//     if (!selectedItems)\n//       return true;\n//\n//     if (checkEdit) {\n//       if (selectedItems.length !== 1)\n//         return true;\n//     }\n//     else\n//     if (selectedItems.length < 1)\n//       return true;\n//     return false;\n//   };\n//\n//   const onViewClicked = (): void => {\n//     if (isAuthenticated) {\n//       navigate(\"/locations\");\n//     }\n//   };\n//\n//   const onAddClicked = (): void => {\n//     // if (locationMain.find((us) => us.id === selectedLocation.id) !== undefined) {\n//     //   switchSavingMode();\n//     // }\n//     switchSavingMode();\n//   };\n//\n//   const updateMenuItems = (): IContextualMenuItem[] => {\n//     return menuItems.map((item: IContextualMenuItem) => {\n//       switch (item.key) {\n//         case ADD:\n//           item.onClick = () => onAddClicked();\n//           item.style = enabledMenuItemStyle;\n//           break;\n//         case VIEW_LOCATIONS:\n//           item.onClick = () => onViewClicked();\n//           item.style = enabledMenuItemStyle\n//           break;\n//         default:\n//           return item;\n//       }\n//       return item;\n//     });\n//   };\n//\n//   return (\n//       <div>\n//         {isSaving && (\n//             <SaveLocationMainModal\n//                 switchMode={switchSavingMode}\n//                 items={items}\n//                 setItems={setItems}\n//                 locations = {locationMain}\n//                 setLocations = {setLocationMain}\n//             />\n//         )}\n//         <Stack className=\"hero is-fullheight has-background-dark\" tokens={setGapBetweenHeadersAndDetailsList}>\n//           <Stack horizontal tokens={setGapBetweenHeadersAndUserInfo}>\n//             <StackItem tokens={setGapBetweenHeaders}>\n//               <p className=\"title has-text-white is-size-3 marginFH2\"> {getTitle()} </p>\n//             </StackItem>\n//           </Stack>\n//           <StackItem>\n//             <ThemeProvider theme={transparentTheme}>\n//               <CommandBar items={updateMenuItems()} styles={commandBarStyles} />\n//               <DetailsList className=\"hero is-fullheight has-background-dark\"\n//                            items={items}\n//                            setKey=\"set\"\n//                            columns={columns}\n//                            selectionMode={SelectionMode.single}\n//                            layoutMode={DetailsListLayoutMode.justified}\n//                            selection={selection}\n//                            selectionPreservedOnEmptyClick={true}\n//                            onRenderItemColumn={renderItemColumn}>\n//               </DetailsList>\n//             </ThemeProvider>\n//           </StackItem>\n//         </Stack>\n//       </div>\n//   );\n// };\n//\n// export default MainPage;","map":{"version":3,"sources":["D:/Faculta/Licenta/Traveltech/UI/src/main/MainPage.tsx"],"names":[],"mappingssourcesContent":["// import { CommandBar, DetailsList, IColumn, IContextualMenuItem, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\r\n// import { DetailsListLayoutMode, IObjectWithKey, Selection, SelectionMode } from \"@fluentui/react/lib/DetailsList\";\r\n// import React, {useCallback, useEffect, useState} from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { useAuth } from \"../auth/AuthProvider\";\r\n// import { IMainPageProps } from \"../model/IMainPageProps\";\r\n// import { LocationDetailsListItem } from \"../model/ILocationDetailsListItem\";\r\n// import {VIEW_LOCATIONS, ADD} from \"../utils/generalConstants\";\r\n// import SaveLocationMainModal from \"./dashboard/SaveLocationMainModal\";\r\n// import { LocationMainService } from \"../utils/service\";\r\n// import {\r\n//   getViewportAsPixels,\r\n//   getByRequestUrl,\r\n//   loggedUser, setSelectedLocation, selectedLocation\r\n// } from \"../utils/utilsMethods\";\r\n// import {\r\n//   commandBarStyles,\r\n//   defaultMenuItemStyle,\r\n//   detailsListColumnStyle,\r\n//   itemStyle,\r\n//   enabledMenuItemStyle,\r\n//   setGapBetweenHeaders,\r\n//   setGapBetweenHeadersAndDetailsList,\r\n//   transparentTheme,\r\n//   itemStyleForLastColumn,\r\n//   setGapBetweenHeadersAndUserInfo, setStyleForUserName\r\n// } from \"./MainPage.styles\";\r\n// import LoginFoot from \"../images/foot.svg\";\r\n// import {Location} from \"../model/ILocation\";\r\n// import SaveLocationModal from \"../locationpage/locationAll/SaveLocationModal\";\r\n// import EditUserStoryModal from \"../locationpage/locationAll/EditLocationModal\";\r\n//\r\n// const CITY_COLUMN: string = \"City\";\r\n// const COUNTRY_COLUMN: string = \"Country\";\r\n// const TIP_COLUMN: string = \"Tip\";\r\n// const RATING_COLUMN: string = \"Rating\";\r\n// const CREATED_BY_COLUMN: string = \"User\";\r\n// const BACKLOG_TITLE: string = \"Top 10 Locations\";\r\n//\r\n// const getColumnName = (city: string, country: string, tip: string, rating: string, user: string, name: string): string => {\r\n//   return name === city\r\n//     ? city\r\n//     : name === country\r\n//     ? country\r\n//     : name === tip\r\n//     ? tip\r\n//     : name === rating\r\n//     ? rating\r\n//     : name === user\r\n//     ? user: name;\r\n// };\r\n//\r\n// const getFieldName = (columnName: string): string => {\r\n//   return columnName === CITY_COLUMN\r\n//     ? \"city\"\r\n//     : columnName === COUNTRY_COLUMN\r\n//     ? \"country\"\r\n//     : columnName === TIP_COLUMN\r\n//     ? \"tip\"\r\n//     : columnName === RATING_COLUMN\r\n//     ? \"rating\"\r\n//     : columnName === CREATED_BY_COLUMN\r\n//     ? \"user\"\r\n//     : \"\";\r\n// };\r\n//\r\n// const getColumn = (pageWidth: number, name: string): IColumn => {\r\n//   return {\r\n//     key: name,\r\n//     name: getColumnName(CITY_COLUMN,COUNTRY_COLUMN,TIP_COLUMN,RATING_COLUMN,CREATED_BY_COLUMN,name),\r\n//     fieldName: getFieldName(name),\r\n//     minWidth: getViewportAsPixels(pageWidth, 10),\r\n//     maxWidth: getViewportAsPixels(pageWidth, 20),\r\n//     isResizable: true,\r\n//     isMultiline: true,\r\n//     styles: detailsListColumnStyle,\r\n//   };\r\n// };\r\n//\r\n// const getColumns = (pageWidth: number, names: string[]): IColumn[] => {\r\n//   return names.map((name: string) => getColumn(pageWidth, name));\r\n// };\r\n//\r\n// export const getListItemFromMainPage = (locationMain: Location): LocationDetailsListItem => {\r\n//   return {\r\n//     id: locationMain.id,\r\n//     city: locationMain.city,\r\n//     country: locationMain.country,\r\n//     tip: locationMain.tip,\r\n//     rating: locationMain.rating,\r\n//     user: `${locationMain.user.firstName}${\" \"}${locationMain.user.lastName}`,\r\n//   };\r\n// };\r\n//\r\n// const renderItemColumn = (item: any, index?: number, column?: IColumn): React.ReactFragment => {\r\n//   const fieldContent = item[column!.fieldName as keyof LocationDetailsListItem] as string;\r\n//\r\n//   return (\r\n//     <React.Fragment>\r\n//       {column!.fieldName !== \"created\"\r\n//         ? <span className={itemStyle}>{fieldContent}</span>\r\n//         : <span className={itemStyleForLastColumn}>{fieldContent}</span>\r\n//       }\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n//\r\n// const getLocationMain = (allLocations: Location[]): LocationDetailsListItem[] => {\r\n//   return allLocations.map((item) => getListItemFromMainPage(item));\r\n// };\r\n//\r\n// const getMenuItem = (name: string): IContextualMenuItem => {\r\n//   return {\r\n//     key: name,\r\n//     text: name,\r\n//     iconProps: { iconName: name },\r\n//   };\r\n// };\r\n//\r\n// const getMenuItems = (names: string[]): IContextualMenuItem[] => {\r\n//   return names.map((name: string) => getMenuItem(name));\r\n// };\r\n//\r\n// const MainPage = (props: IMainPageProps): JSX.Element => {\r\n//   const { isAuthenticated } = useAuth();\r\n//   const navigate = useNavigate();\r\n//   const [items, setItems] = useState<LocationDetailsListItem[]>([]);\r\n//   const [locationMain, setLocationMain] = useState<Location[]>([]);\r\n//   const [selectedItems, setSelectedItems] = useState<IObjectWithKey[] | undefined>(undefined);\r\n//   const [selection] = useState<Selection>(\r\n//     () =>\r\n//       new Selection({\r\n//         onSelectionChanged: () => {\r\n//           const selectedItems: IObjectWithKey[] = selection.getSelection();\r\n//           const selected: LocationDetailsListItem = selectedItems[0] as LocationDetailsListItem;\r\n//           setSelectedLocation(selected);\r\n//           setSelectedItems(selectedItems);\r\n//         }\r\n//       })\r\n//   );\r\n//\r\n//   const columns: IColumn[] = getColumns(props.pageWidth, [CITY_COLUMN, COUNTRY_COLUMN, TIP_COLUMN, RATING_COLUMN, CREATED_BY_COLUMN]);\r\n//   const menuItems: IContextualMenuItem[] = getMenuItems([ADD, VIEW_LOCATIONS]);\r\n//\r\n//   useEffect(() => {\r\n//     if (!isAuthenticated) {\r\n//       navigate(\"/login\");\r\n//     }\r\n//   }, [isAuthenticated]);\r\n//\r\n//   useEffect(() => {\r\n//     getAllLocationsMain();\r\n//   }, []);\r\n//\r\n//   const [isSaving, setIsSaving] = useState(false);\r\n//   const switchSavingMode = useCallback(\r\n//       () => setIsSaving((isSaving) => !isSaving),\r\n//       []\r\n//   );\r\n//\r\n//\r\n//     const getAllLocationsMain = async () => {\r\n//       const allLocations: Location[] = await getByRequestUrl(`${LocationMainService.GET_ALL}`);\r\n//       setItems(getLocationMain(allLocations));\r\n//       setLocationMain(allLocations);\r\n//     };\r\n//\r\n//   const getSelectedLocation = (): Location => {\r\n//     const index = locationMain.findIndex((it) => it.id === selectedLocation.id);\r\n//     return locationMain[index];\r\n//   };\r\n//\r\n//   const getSelectedItem = (): IObjectWithKey => {\r\n//     return selectedItems![0];\r\n//   };\r\n//\r\n//   const getTitle = (): string => {\r\n//     return `${\"Welcome back, \"}${loggedUser.firstName}${ \" \"}${loggedUser.lastName}${\"!\"}`;\r\n//   };\r\n//\r\n//   const isSaveOrDeleteDisabled = (checkEdit: boolean): boolean => {\r\n//     if (!selectedItems)\r\n//       return true;\r\n//\r\n//     if (checkEdit) {\r\n//       if (selectedItems.length !== 1)\r\n//         return true;\r\n//     }\r\n//     else\r\n//     if (selectedItems.length < 1)\r\n//       return true;\r\n//     return false;\r\n//   };\r\n//\r\n//   const onViewClicked = (): void => {\r\n//     if (isAuthenticated) {\r\n//       navigate(\"/locations\");\r\n//     }\r\n//   };\r\n//\r\n//   const onAddClicked = (): void => {\r\n//     // if (locationMain.find((us) => us.id === selectedLocation.id) !== undefined) {\r\n//     //   switchSavingMode();\r\n//     // }\r\n//     switchSavingMode();\r\n//   };\r\n//\r\n//   const updateMenuItems = (): IContextualMenuItem[] => {\r\n//     return menuItems.map((item: IContextualMenuItem) => {\r\n//       switch (item.key) {\r\n//         case ADD:\r\n//           item.onClick = () => onAddClicked();\r\n//           item.style = enabledMenuItemStyle;\r\n//           break;\r\n//         case VIEW_LOCATIONS:\r\n//           item.onClick = () => onViewClicked();\r\n//           item.style = enabledMenuItemStyle\r\n//           break;\r\n//         default:\r\n//           return item;\r\n//       }\r\n//       return item;\r\n//     });\r\n//   };\r\n//\r\n//   return (\r\n//       <div>\r\n//         {isSaving && (\r\n//             <SaveLocationMainModal\r\n//                 switchMode={switchSavingMode}\r\n//                 items={items}\r\n//                 setItems={setItems}\r\n//                 locations = {locationMain}\r\n//                 setLocations = {setLocationMain}\r\n//             />\r\n//         )}\r\n//         <Stack className=\"hero is-fullheight has-background-dark\" tokens={setGapBetweenHeadersAndDetailsList}>\r\n//           <Stack horizontal tokens={setGapBetweenHeadersAndUserInfo}>\r\n//             <StackItem tokens={setGapBetweenHeaders}>\r\n//               <p className=\"title has-text-white is-size-3 marginFH2\"> {getTitle()} </p>\r\n//             </StackItem>\r\n//           </Stack>\r\n//           <StackItem>\r\n//             <ThemeProvider theme={transparentTheme}>\r\n//               <CommandBar items={updateMenuItems()} styles={commandBarStyles} />\r\n//               <DetailsList className=\"hero is-fullheight has-background-dark\"\r\n//                            items={items}\r\n//                            setKey=\"set\"\r\n//                            columns={columns}\r\n//                            selectionMode={SelectionMode.single}\r\n//                            layoutMode={DetailsListLayoutMode.justified}\r\n//                            selection={selection}\r\n//                            selectionPreservedOnEmptyClick={true}\r\n//                            onRenderItemColumn={renderItemColumn}>\r\n//               </DetailsList>\r\n//             </ThemeProvider>\r\n//           </StackItem>\r\n//         </Stack>\r\n//       </div>\r\n//   );\r\n// };\r\n//\r\n// export default MainPage;\r\n"]},"metadata":{},"sourceType":"module"}