{"ast":null,"code":"var _jsxFileName = \"D:\\\\Faculta\\\\Anul3\\\\Sem1\\\\Colectiv\\\\Proiect\\\\ProjectManagement\\\\UI\\\\src\\\\auth\\\\AuthProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useEffect, useState } from \"react\";\nimport { getLogger } from \"../core\";\nimport { loginApi } from \"./authApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst log = getLogger(\"AuthContext\");\nconst initialState = {\n  isAuthenticated: false,\n  isAuthenticating: false,\n  authenticationError: null,\n  pendingAuthentication: false,\n  token: \"\"\n};\nconst AuthContext = /*#__PURE__*/createContext(initialState);\nexport const useAuth = () => {\n  _s();\n\n  return useContext(AuthContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const AuthProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState(initialState);\n  const {\n    isAuthenticated,\n    isAuthenticating,\n    authenticationError,\n    pendingAuthentication,\n    token\n  } = state;\n  const login = useCallback(loginCallback, [state]);\n  useEffect(authenticationEffect, [pendingAuthentication]);\n  const value = {\n    isAuthenticated,\n    isAuthenticating,\n    authenticationError,\n    token,\n    login\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n\n  function loginCallback(email, password) {\n    log(\"login\");\n    setState({ ...state,\n      pendingAuthentication: true,\n      email,\n      password\n    });\n  }\n\n  function authenticationEffect() {\n    let canceled = false;\n    authenticate();\n    return () => {\n      canceled = true;\n    };\n\n    async function authenticate() {\n      if (!pendingAuthentication) {\n        log(\"pendingAuthentication is false\");\n        return;\n      }\n\n      try {\n        log(\"authenticating\");\n        setState({ ...state,\n          isAuthenticating: true\n        });\n        const {\n          email,\n          password\n        } = state;\n        const user = await loginApi(email, password);\n        log(`authenticated with user ${user.id}`);\n\n        if (canceled) {\n          return;\n        }\n\n        log(\"authenticate succeeded\");\n        setState({ ...state,\n          token,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false\n        });\n      } catch (error) {\n        if (canceled) {\n          return;\n        }\n\n        log(\"authenticate failed\");\n        setState({ ...state,\n          authenticationError: error,\n          pendingAuthentication: false,\n          isAuthenticating: false\n        });\n      }\n    }\n  }\n};\n\n_s2(AuthProvider, \"vfQwpt7YsDaVi445IXkCuItuHkg=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/Faculta/Anul3/Sem1/Colectiv/Proiect/ProjectManagement/UI/src/auth/AuthProvider.tsx"],"names":["React","createContext","useCallback","useContext","useEffect","useState","getLogger","loginApi","log","initialState","isAuthenticated","isAuthenticating","authenticationError","pendingAuthentication","token","AuthContext","useAuth","AuthProvider","children","state","setState","login","loginCallback","authenticationEffect","value","email","password","canceled","authenticate","user","id","error"],"mappings":"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","sourcesContent":["import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getLogger } from \"../core\";\r\nimport { loginApi } from \"./authApi\";\r\n\r\nconst log = getLogger(\"AuthContext\");\r\n\r\ntype LoginFn = (email?: string, password?: string) => void;\r\n\r\nconst initialState: AuthState = {\r\n  isAuthenticated: false,\r\n  isAuthenticating: false,\r\n  authenticationError: null,\r\n  pendingAuthentication: false,\r\n  token: \"\",\r\n};\r\n\r\nexport interface AuthState {\r\n  authenticationError: Error | null;\r\n  isAuthenticated: boolean;\r\n  isAuthenticating: boolean;\r\n  pendingAuthentication?: boolean;\r\n  email?: string;\r\n  password?: string;\r\n  token: string;\r\n  login?: LoginFn;\r\n}\r\n\r\nconst AuthContext = createContext(initialState);\r\n\r\ninterface AuthProviderProps {\r\n  children: PropTypes.ReactNodeLike;\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [state, setState] = useState<AuthState>(initialState);\r\n  const {\r\n    isAuthenticated,\r\n    isAuthenticating,\r\n    authenticationError,\r\n    pendingAuthentication,\r\n    token,\r\n  } = state;\r\n  const login = useCallback<LoginFn>(loginCallback, [state]);\r\n  useEffect(authenticationEffect, [pendingAuthentication]);\r\n  const value = {\r\n    isAuthenticated,\r\n    isAuthenticating,\r\n    authenticationError,\r\n    token,\r\n    login,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n\r\n  function loginCallback(email?: string, password?: string): void {\r\n    log(\"login\");\r\n    setState({\r\n      ...state,\r\n      pendingAuthentication: true,\r\n      email,\r\n      password,\r\n    });\r\n  }\r\n\r\n  function authenticationEffect() {\r\n    let canceled = false;\r\n    authenticate();\r\n    return () => {\r\n      canceled = true;\r\n    };\r\n\r\n    async function authenticate() {\r\n      if (!pendingAuthentication) {\r\n        log(\"pendingAuthentication is false\");\r\n        return;\r\n      }\r\n      try {\r\n        log(\"authenticating\");\r\n        setState({\r\n          ...state,\r\n          isAuthenticating: true,\r\n        });\r\n        const { email, password } = state;\r\n        const user = await loginApi(email, password);\r\n        log(`authenticated with user ${user.id}`);\r\n        if (canceled) {\r\n          return;\r\n        }\r\n        log(\"authenticate succeeded\");\r\n        setState({\r\n          ...state,\r\n          token,\r\n          pendingAuthentication: false,\r\n          isAuthenticated: true,\r\n          isAuthenticating: false,\r\n        });\r\n      } catch (error: any) {\r\n        if (canceled) {\r\n          return;\r\n        }\r\n        log(\"authenticate failed\");\r\n        setState({\r\n          ...state,\r\n          authenticationError: error,\r\n          pendingAuthentication: false,\r\n          isAuthenticating: false,\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}