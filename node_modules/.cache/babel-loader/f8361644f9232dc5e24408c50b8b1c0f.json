{"ast":null,"code":"var _jsxFileName = \"D:\\\\InternshipAccesa\\\\Questech\\\\src\\\\questpage\\\\questAll\\\\QuestProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport { createQuest, updateQuest } from \"./questApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  saving: false\n};\nexport const QuestContext = /*#__PURE__*/React.createContext(initialState);\nexport const QuestProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState(initialState);\n  const {\n    saving,\n    savingError\n  } = state;\n  const saveQuest = useCallback(saveQuestCallback, []);\n  const value = {\n    saving,\n    savingError,\n    saveQuest\n  };\n  return /*#__PURE__*/_jsxDEV(QuestContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n\n  async function saveQuestCallback(quest) {\n    try {\n      setState({ ...state,\n        savingError: null,\n        saving: true\n      });\n      const q = {\n        id: quest.id,\n        task: quest.task,\n        correct_answer: quest.correct_answer,\n        tokens: quest.tokens,\n        user: quest.user\n      };\n      const qU = {\n        id: quest.id,\n        task: quest.task,\n        correct_answer: quest.correct_answer,\n        answer: quest.answer,\n        tokens: quest.tokens,\n        user: quest.user\n      };\n      const savedQuest = await (quest.id ? updateQuest(qU) : createQuest(q));\n      setState({ ...state,\n        savingError: null,\n        saving: false\n      });\n      return savedQuest;\n    } catch (error) {\n      setState({ ...state,\n        savingError: error,\n        saving: false\n      });\n    }\n  }\n};\n\n_s(QuestProvider, \"93UMHeeTQzihZlFSl9GlM8m/1Ms=\");\n\n_c = QuestProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestProvider\");","map":{"version":3,"sources":["D:/InternshipAccesa/Questech/src/questpage/questAll/QuestProvider.tsx"],"names":["React","useCallback","useState","createQuest","updateQuest","initialState","saving","QuestContext","createContext","QuestProvider","children","state","setState","savingError","saveQuest","saveQuestCallback","value","quest","q","id","task","correct_answer","tokens","user","qU","answer","savedQuest","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAGA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,YAAzC;;AAUA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,MAAM,EAAE;AADuB,CAAjC;AAIA,OAAO,MAAMC,YAAY,gBAAGP,KAAK,CAACQ,aAAN,CAC1BH,YAD0B,CAArB;AAQP,OAAO,MAAMI,aAA2C,GAAG,QAErD;AAAA;;AAAA,MAFsD;AAC1DC,IAAAA;AAD0D,GAEtD;AACJ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAaG,YAAb,CAAlC;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUO,IAAAA;AAAV,MAA0BF,KAAhC;AACA,QAAMG,SAAS,GAAGb,WAAW,CAAcc,iBAAd,EAAiC,EAAjC,CAA7B;AACA,QAAMC,KAAK,GAAG;AACZV,IAAAA,MADY;AAEZO,IAAAA,WAFY;AAGZC,IAAAA;AAHY,GAAd;AAMA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEE,KAA9B;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,iBAAeK,iBAAf,CAAiCE,KAAjC,EAAoD;AAClD,QAAI;AACFL,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,QAAAA,WAAW,EAAE,IAAxB;AAA8BP,QAAAA,MAAM,EAAE;AAAtC,OAAD,CAAR;AACA,YAAMY,CAAC,GAAG;AACRC,QAAAA,EAAE,EAAEF,KAAK,CAACE,EADF;AAERC,QAAAA,IAAI,EAAEH,KAAK,CAACG,IAFJ;AAGRC,QAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHd;AAIRC,QAAAA,MAAM,EAAEL,KAAK,CAACK,MAJN;AAKRC,QAAAA,IAAI,EAAEN,KAAK,CAACM;AALJ,OAAV;AAOA,YAAMC,EAAE,GAAG;AACTL,QAAAA,EAAE,EAAEF,KAAK,CAACE,EADD;AAETC,QAAAA,IAAI,EAAEH,KAAK,CAACG,IAFH;AAGTC,QAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHb;AAITI,QAAAA,MAAM,EAAER,KAAK,CAACQ,MAJL;AAKTH,QAAAA,MAAM,EAAEL,KAAK,CAACK,MALL;AAMTC,QAAAA,IAAI,EAAEN,KAAK,CAACM;AANH,OAAX;AAQA,YAAMG,UAAU,GAAG,OAAOT,KAAK,CAACE,EAAN,GACpBf,WAAW,CAACoB,EAAD,CADS,GAEpBrB,WAAW,CAACe,CAAD,CAFE,CAAnB;AAGAN,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,QAAAA,WAAW,EAAE,IAAxB;AAA8BP,QAAAA,MAAM,EAAE;AAAtC,OAAD,CAAR;AACA,aAAOoB,UAAP;AACD,KAtBD,CAsBE,OAAOC,KAAP,EAAmB;AACnBf,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,QAAAA,WAAW,EAAEc,KAAxB;AAA+BrB,QAAAA,MAAM,EAAE;AAAvC,OAAD,CAAR;AACD;AACF;AACF,CA7CM;;GAAMG,a;;KAAAA,a","sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { QuestProps } from \"./QuestProps\";\r\nimport { createQuest, updateQuest } from \"./questApi\";\r\n\r\ntype SaveQuestFn = (quest: QuestProps) => Promise<any>;\r\n\r\nexport interface QuestState {\r\n  saving: boolean;\r\n  savingError?: Error | null;\r\n  saveQuest?: SaveQuestFn;\r\n}\r\n\r\nconst initialState: QuestState = {\r\n  saving: false,\r\n};\r\n\r\nexport const QuestContext = React.createContext<QuestState>(\r\n  initialState\r\n);\r\n\r\ninterface QuestProviderProps {\r\n  children: PropTypes.ReactNodeLike;\r\n}\r\n\r\nexport const QuestProvider: React.FC<QuestProviderProps> = ({\r\n  children,\r\n}) => {\r\n  const [state, setState] = useState<QuestState>(initialState);\r\n  const { saving, savingError } = state;\r\n  const saveQuest = useCallback<SaveQuestFn>(saveQuestCallback, []);\r\n  const value = {\r\n    saving,\r\n    savingError,\r\n    saveQuest,\r\n  };\r\n\r\n  return (\r\n    <QuestContext.Provider value={value}>\r\n      {children}\r\n    </QuestContext.Provider>\r\n  );\r\n\r\n  async function saveQuestCallback(quest: QuestProps) {\r\n    try {\r\n      setState({...state, savingError: null, saving: true});\r\n      const q = {\r\n        id: quest.id!,\r\n        task: quest.task!,\r\n        correct_answer: quest.correct_answer!,\r\n        tokens: quest.tokens!,\r\n        user: quest.user!,\r\n      };\r\n      const qU = {\r\n        id: quest.id!,\r\n        task: quest.task!,\r\n        correct_answer: quest.correct_answer!,\r\n        answer: quest.answer!,\r\n        tokens: quest.tokens!,\r\n        user: quest.user!,\r\n      };\r\n      const savedQuest = await (quest.id\r\n          ? updateQuest(qU)\r\n          : createQuest(q));\r\n      setState({...state, savingError: null, saving: false});\r\n      return savedQuest;\r\n    } catch (error: any) {\r\n      setState({...state, savingError: error, saving: false});\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}