{"ast":null,"code":"import axios from \"axios\";\nimport { config } from \"../core\";\nexport const getByRequestUrl = requestUrl => {\n  return axios.get(requestUrl, config).then(res => {\n    return Promise.resolve(res.data);\n  }).catch(err => {\n    console.log(err);\n    return Promise.reject(err);\n  });\n};\nexport const getViewportAsPixels = (pageSizePx, viewportSize) => {\n  return viewportSize * pageSizePx / 100;\n};\nexport const getDefaultBadge = () => {\n  return {\n    id: 0,\n    name: \"\",\n    obtained_at: \"\",\n    user: getDefaultUser()\n  };\n};\nexport const getDefaultQuest = () => {\n  return {\n    id: 0,\n    task: \"\",\n    correct_answer: \"\",\n    answer: \"\",\n    tokens: 0,\n    user: getDefaultUser()\n  };\n};\nexport const getDefaultUser = () => {\n  return {\n    id: 0,\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    tokens: 0\n  };\n};\nexport const getDefaultBadgeDetailsListItem = () => {\n  return {\n    id: 0,\n    name: \"\",\n    obtained_at: \"\",\n    user: \"\"\n  };\n};\nexport const getDefaultUserDetailsListItem = () => {\n  return {\n    id: 0,\n    firstName: \"\",\n    lastName: \"\",\n    tokens: 0\n  };\n};\nexport const getDefaultQuestDetailsListItem = () => {\n  return {\n    id: 0,\n    task: \"\",\n    correct_answer: \"\",\n    answer: \"\",\n    tokens: 0,\n    user: \"\"\n  };\n};\nexport let loggedUser = getDefaultUser();\nexport const setLoggedUser = value => {\n  loggedUser = value;\n};\nexport let selectedBadge = getDefaultBadgeDetailsListItem();\nexport const setSelectedBadge = value => {\n  selectedBadge = value;\n};\nexport let selectedUser = getDefaultUserDetailsListItem();\nexport const setSelectedUser = value => {\n  selectedUser = value;\n};\nexport let selectedQuest = getDefaultQuestDetailsListItem();\nexport const setSelectedQuest = value => {\n  selectedQuest = value;\n};","map":{"version":3,"sources":["D:/InternshipAccesa/Traveltech/src/utils/utilsMethods.ts"],"names":["axios","config","getByRequestUrl","requestUrl","get","then","res","Promise","resolve","data","catch","err","console","log","reject","getViewportAsPixels","pageSizePx","viewportSize","getDefaultBadge","id","name","obtained_at","user","getDefaultUser","getDefaultQuest","task","correct_answer","answer","tokens","firstName","lastName","email","password","getDefaultBadgeDetailsListItem","getDefaultUserDetailsListItem","getDefaultQuestDetailsListItem","loggedUser","setLoggedUser","value","selectedBadge","setSelectedBadge","selectedUser","setSelectedUser","selectedQuest","setSelectedQuest"],"mappings":"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","sourcesContent":["import { User } from \"../model/IUser\";\r\nimport {Badge} from \"../model/IBadge\";\r\nimport {Quest} from \"../model/IQuest\";\r\nimport axios from \"axios\";\r\nimport { config } from \"../core\";\r\nimport {BadgeDetailsListItem} from \"../model/IBadgeDetailsListItem\";\r\nimport {QuestDetailsListItem} from \"../model/IQuestDetailsListItem\";\r\nimport {UserDetailsListItem} from \"../model/IUserDetailsListItem\";\r\n\r\nexport const getByRequestUrl = (requestUrl: string) => {\r\n  return axios\r\n  .get(requestUrl, config)\r\n  .then((res) => {\r\n    return Promise.resolve(res.data);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n    return Promise.reject(err);\r\n  });\r\n};\r\n\r\nexport const getViewportAsPixels = (pageSizePx: number, viewportSize: number): number => {\r\n    return (viewportSize * pageSizePx) / 100;\r\n};\r\n\r\nexport const getDefaultBadge = (): Badge => {\r\n  return {\r\n    id: 0,\r\n    name: \"\",\r\n    obtained_at: \"\",\r\n    user: getDefaultUser()\r\n  };\r\n};\r\n\r\nexport const getDefaultQuest = (): Quest => {\r\n  return {\r\n    id: 0,\r\n    task: \"\",\r\n    correct_answer: \"\",\r\n    answer: \"\",\r\n    tokens: 0,\r\n    user: getDefaultUser()\r\n  };\r\n};\r\n\r\nexport const getDefaultUser = (): User => {\r\n  return {\r\n    id: 0,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    tokens: 0,\r\n  };\r\n};\r\n\r\nexport const getDefaultBadgeDetailsListItem = (): BadgeDetailsListItem => {\r\n  return {\r\n    id: 0,\r\n    name: \"\",\r\n    obtained_at: \"\",\r\n    user: \"\"\r\n  };\r\n};\r\n\r\nexport const getDefaultUserDetailsListItem = (): UserDetailsListItem => {\r\n  return {\r\n    id: 0,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    tokens: 0,\r\n  };\r\n};\r\n\r\nexport const getDefaultQuestDetailsListItem = (): QuestDetailsListItem => {\r\n  return {\r\n    id: 0,\r\n    task: \"\",\r\n    correct_answer: \"\",\r\n    answer: \"\",\r\n    tokens: 0,\r\n    user: \"\"\r\n  };\r\n};\r\n\r\nexport let loggedUser: User = getDefaultUser();\r\n\r\nexport const setLoggedUser = (value: User) => {\r\n  loggedUser = value;\r\n};\r\n\r\nexport let selectedBadge: BadgeDetailsListItem = getDefaultBadgeDetailsListItem();\r\n\r\nexport const setSelectedBadge = (value: BadgeDetailsListItem) => {\r\n  selectedBadge = value;\r\n};\r\n\r\nexport let selectedUser: UserDetailsListItem = getDefaultUserDetailsListItem();\r\n\r\nexport const setSelectedUser = (value: UserDetailsListItem) => {\r\n  selectedUser = value;\r\n};\r\n\r\nexport let selectedQuest: QuestDetailsListItem = getDefaultQuestDetailsListItem();\r\n\r\nexport const setSelectedQuest = (value: QuestDetailsListItem) => {\r\n  selectedQuest = value;\r\n};"]},"metadata":{},"sourceType":"module"}