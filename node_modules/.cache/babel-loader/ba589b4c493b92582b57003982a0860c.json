{"ast":null,"code":"import axios from \"axios\";\nimport { config, getLogger } from \"../core\";\nimport { projectBaseUrl } from \"../utils/generalConstants\";\nconst log = getLogger(\"userApi\");\nconst authUrl = `${projectBaseUrl}login`;\nexport const loginApi = (email, password) => {\n  log(`loginApi with ${email} and ${password}`);\n  return axios.post(authUrl, {\n    email,\n    password\n  }, config).then(res => {\n    log(`login - succeeded`);\n    return Promise.resolve(res.data);\n  }).catch(err => {\n    log(`login - failed`);\n    return Promise.reject(err);\n  });\n};","map":{"version":3,"sources":["D:/Faculta/Anul3/Sem1/Colectiv/Proiect/ProjectManagement/UI/src/auth/authApi.tsx"],"names":["axios","config","getLogger","projectBaseUrl","log","authUrl","loginApi","email","password","post","then","res","Promise","resolve","data","catch","err","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,SAAlC;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,MAAMC,GAAG,GAAGF,SAAS,CAAC,SAAD,CAArB;AAEA,MAAMG,OAAO,GAAI,GAAEF,cAAe,OAAlC;AAEA,OAAO,MAAMG,QAGU,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7CJ,EAAAA,GAAG,CAAE,iBAAgBG,KAAM,QAAOC,QAAS,EAAxC,CAAH;AACA,SAAOR,KAAK,CACTS,IADI,CACCJ,OADD,EACU;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,GADV,EAC+BP,MAD/B,EAEJS,IAFI,CAEEC,GAAD,IAAS;AACbP,IAAAA,GAAG,CAAE,mBAAF,CAAH;AACA,WAAOQ,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACG,IAApB,CAAP;AACD,GALI,EAMJC,KANI,CAMGC,GAAD,IAAS;AACdZ,IAAAA,GAAG,CAAE,gBAAF,CAAH;AACA,WAAOQ,OAAO,CAACK,MAAR,CAAeD,GAAf,CAAP;AACD,GATI,CAAP;AAUD,CAfM","sourcesContent":["import axios from \"axios\";\r\nimport { config, getLogger } from \"../core\";\r\nimport { UserProps } from \"../model/UserProps\";\r\nimport { projectBaseUrl } from \"../utils/generalConstants\";\r\n\r\nconst log = getLogger(\"userApi\");\r\n\r\nconst authUrl = `${projectBaseUrl}login`;\r\n\r\nexport const loginApi: (\r\n  email?: string,\r\n  password?: string\r\n) => Promise<UserProps> = (email, password) => {\r\n  log(`loginApi with ${email} and ${password}`);\r\n  return axios\r\n    .post(authUrl, { email, password }, config)\r\n    .then((res) => {\r\n      log(`login - succeeded`);\r\n      return Promise.resolve(res.data);\r\n    })\r\n    .catch((err) => {\r\n      log(`login - failed`);\r\n      return Promise.reject(err);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}